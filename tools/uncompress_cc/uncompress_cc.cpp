#include <vector>
#include <cstdint>
#include <cassert>
#include <string>
#include <fstream>
#include <string.h>
#include <stack>
#include <algorithm>
#include <span>
#include <filesystem>

std::string hexdump(const void* const buffer, int buffer_size, int width);

inline uint8_t lo(const uint16_t value_)
{
    return value_ & 0xFF;
}

inline uint8_t hi(const uint16_t value_)
{
    return value_ >> 8;
}

inline uint16_t lo(const uint32_t value_)
{
    return value_ & 0xFFFF;
}

inline uint16_t hi(const uint32_t value_)
{
    return value_ >> 16;
}

inline uint16_t swap16(const uint16_t value_)
{
    return (value_ << 8) + (value_ >> 8);
}

inline uint32_t swap32(const uint32_t value_)
{
    const uint16_t lv = lo(value_);
    const uint16_t hv = hi(value_);
    return (swap16(lv) << 16) + swap16(hv);
}

std::vector<uint8_t> read_binary_file(const std::string& filename_)
{
    std::ifstream file(filename_, std::ios::binary);
    if (!file) {
        throw 1;
    }
    return std::vector<uint8_t>((std::istreambuf_iterator<char>(file)),
        std::istreambuf_iterator<char>());
}

void read(const uint8_t*& current, void* into, const size_t size)
{
    ::memcpy(into, current, size);
    current += size;
}

uint16_t read16(const uint8_t*& current)
{
    uint16_t tmp = 0;
    read(current, &tmp, sizeof(tmp));
    return swap16(tmp);
}

uint32_t read32(const uint8_t*& current)
{
    uint32_t tmp = 0;
    read(current, &tmp, sizeof(tmp));
    return swap32(tmp);
}

constexpr uint8_t LAST_BLOCK = 0;
constexpr uint8_t NOT_LAST_BLOCK = 1;

#pragma pack(push, 1)
struct block_t {
    uint8_t packed_size{};
    uint8_t flag{}; // 0 = last block, 1 = more blocks comming
    uint16_t data_len{}; // (un)compressed data
};
static_assert(sizeof(block_t) == 4, "invalid size");
#pragma pack(pop)

struct tables_t {
    std::vector<uint8_t> table0;
    std::vector<uint8_t> table1;
    std::vector<uint8_t> table3;
    std::vector<uint8_t> table4;
};

constexpr uint8_t UNPACKED_VAL = 0;

static void uncompress_part1(
    uint8_t*& output_ptr,
    const tables_t& tables,
    const uint8_t index_,
    const std::vector<uint8_t>& table_);

static void uncompress_part0(uint8_t*& output_ptr, const tables_t& tables, const uint8_t index_)
{
    //index_ is value from table3 or table4
    uncompress_part1(output_ptr, tables, index_, tables.table0);
    uncompress_part1(output_ptr, tables, index_, tables.table1);
}

static void uncompress_part1(
    uint8_t*& output_ptr,
    const tables_t& tables,
    const uint8_t index_,
    const std::vector<uint8_t>& table_
)
{
    // table_ is table0 or table1, index_ is value from table3 or table4
    const uint8_t table3_index = table_[index_];
    const uint8_t table3_val = tables.table3[table3_index];

    if (table3_val == UNPACKED_VAL)
    {
        *output_ptr++ = table3_index;
        return;
    }

    if (index_ > table3_val)
    {
        uncompress_part0(output_ptr, tables, table3_val);
        return;
    }

    //else

    {
        uint8_t table4_index = table3_val;
        while (true)
        {
            const uint8_t table4_val = tables.table4[table4_index];

            if (table4_val == UNPACKED_VAL)
            {
                *output_ptr++ = table3_index;
                return;
            }

            if (table4_val < index_)
            {
                uncompress_part0(output_ptr, tables, table4_val);
                return;
            }

            table4_index = table4_val;
        }
    }
}

tables_t prepare_tables(const uint8_t packed_size, const uint8_t*& input_ptr)
{
    if (packed_size == 0)
    {
        throw 32;
    }

    /*
    table3_offsets 256 bytes
    table0         1+packed_size bytes
    table1         1+packed_siize bytes
    */

    // read & prepare uncompress-helper tables
    std::vector<uint8_t> table0(1 + packed_size);
    std::vector<uint8_t> table1(1 + packed_size);
    std::vector<uint8_t> table3_offsets(packed_size); // only needed for initialization, not for uncompression
    std::vector<uint8_t> table3(256); // read and the modified by table4 generation
    std::vector<uint8_t> table4(1 + packed_size); // generated from table3_offsets + table3 content

    read(input_ptr, table3_offsets.data(), packed_size);

    table0[0] = 0xFF; // unused, never read
    read(input_ptr, &table0[1], packed_size);

    table1[0] = 0xFF; // unused, never read
    read(input_ptr, &table1[1], packed_size);

    // its currently, unclear what the max-packed_size could be
    // packed_size is uint8_t so max would be 255

    for (int i = 0; i < packed_size; ++i) {
        const uint8_t ofs = table3_offsets[i];
        uint8_t* value = &table3[ofs]; // [0] is used
        const uint8_t index = i + 1; // (0..255)+1
        table4[index] = *value; //1+256  [0] ignored, [1-256]
        *value = index;
    }
    table4[0] = 0xFF; // unused, never read

    return { table0, table1, table3, table4 };
}

size_t left(const uint8_t* const current_, const uint8_t* const end_)
{
    return end_ - current_;
}

std::vector<uint8_t> uncompress(const std::vector<uint8_t>& packed_data_, const size_t unpacked_size_)
{
    const uint8_t* input_ptr = packed_data_.data();

    const uint8_t* input_end_ptr = input_ptr + packed_data_.size();

    std::vector<uint8_t> output(unpacked_size_);
    uint8_t* output_ptr = output.data();

    block_t block{};
    do
    {
        if (left(input_ptr, input_end_ptr) < sizeof(block))
        {
            throw 4;
        }
        read(input_ptr, &block, sizeof(block));
        bool known_flag = block.flag == LAST_BLOCK || block.flag == NOT_LAST_BLOCK;
        if (!known_flag)
        {
            throw 25;
        }

        //printf("block: packed_size: %u, flag: %u, data_len: %u\n", block.packed_size, block.flag, block.data_len);

        if (block.packed_size == 0) { // is not packed?
            //printf("  not packed: data_len: %u\n", block.data_len);
            read(input_ptr, output_ptr, block.data_len);
            output_ptr += block.data_len;
        }
        else {
            //printf("  packed\n");
            const tables_t tables = prepare_tables(block.packed_size, input_ptr);

            for (int i = 0; i < block.data_len; ++i)
            {
                const uint8_t var1 = *input_ptr++;
                const uint8_t table3_val = tables.table3[var1]; // var1 0..n

                if (table3_val == UNPACKED_VAL) {    // uncompressed part
                    *output_ptr++ = var1; // just store value
                }
                else {                      // compressed part
                    uncompress_part0(output_ptr, tables, table3_val);
                }
            }
        }
    } while (block.flag != LAST_BLOCK);

    if (left(input_ptr, input_end_ptr) != 0)
    {
        throw 9;
    }
    if (left(output_ptr, output.data() + output.size()) != 0)
    {
        throw 29;
    }
    return output; // the-end
}

void write_binary_file(const std::string& file_path_, const void* const data_, size_t size_)
{
    FILE* fp = fopen(file_path_.c_str(), "wb+");
    if (!fp)
    {
        throw 12;
    }
    size_t written = fwrite(data_, 1, size_, fp);
    if (written != size_)
    {
        throw 13;
    }
    fclose(fp);
}

struct packed_block_t {
    uint32_t unpacked_size{};
    std::vector<uint8_t> packed_data;
};

packed_block_t read_packed_block(const uint8_t*& current_, const uint8_t* const end_)
{
    auto left1 = left(current_, end_);
    if (left(current_, end_) < 8)
    {
        throw 14;
    }

    const uint32_t packed_size = read32(current_);
    const uint32_t unpacked_size = read32(current_);

    auto left2 = left(current_, end_);
    if (left(current_, end_) < packed_size)
    {
        throw 15;
    }

    std::vector<uint8_t> packed_data(packed_size);
    read(current_, packed_data.data(), packed_size);

    return { unpacked_size , std::move(packed_data) };
}

int cc0_uncompress(const std::string cc_filepath, const std::vector<uint8_t>& content, const bool extract)
{
    try
    {
        const uint8_t* current = content.data();
        const uint8_t* end = current + content.size();
        const packed_block_t packed_block = read_packed_block(current, end);
        if (left(current, end) != 0) // no left bytes?
        {
            return 3;
        }

        const std::vector<uint8_t> uncompressed = uncompress(packed_block.packed_data, packed_block.unpacked_size);

        if (extract)
        {
            char cc0_filepath[1024]{};
            sprintf(cc0_filepath, "%s.uncompressed.bin", cc_filepath.c_str());
            printf("  write: %s\n", cc0_filepath);
            write_binary_file(cc0_filepath, uncompressed.data(), uncompressed.size());
        }
    }
    catch (...)
    {
        return 30;
    }

    return 0;
};

int cc1_uncompress(const std::string cc_filepath, const std::vector<uint8_t>& content, const bool extract)
{
    try
    {
        /*
        ---- header
        uint16 offset_count
        uint32 offset_table[offset_count]
        ---- data
        ...
        data + offset_table[x]
           packed_block
        ...
        data + offset_table[y]
           packed_block
        ...
        data + offset_table[z]
           packed_block
        ...
        */

        const uint8_t* current = content.data();
        const uint8_t* end = current + content.size();

        if (left(current, end) < 2)
        {
            return 2;
        }

        const uint16_t offset_count = read16(current);

        if (offset_count == 0)
        {
            printf("no offset count!!!\n");
            return 27;
        }

        printf("offset_count: %u\n", offset_count);

        std::vector<packed_block_t> data_blocks(offset_count);
        {
            std::vector<uint32_t> offset_table(offset_count);
            for (size_t i = 0; i < offset_count; ++i) {

                if (left(current, end) < 4)
                {
                    return 3;
                }

                const auto offset = read32(current);
                offset_table[i] = offset;

                printf("offset[%u]: %u\n", i, offset);
            }

            if (offset_table.empty())
            {
                printf("no offsets!!!\n");
                return 22;
            }

            auto sorted_table = offset_table;
            std::sort(sorted_table.begin(), sorted_table.end());

            if (sorted_table != offset_table)
            {
                // never seen with my test data
                printf("not ascending offsets\n");
            }

            // header-size + block.offset = block.begin
            const uint8_t* const data_start = current;
            for (size_t i = 0; i < offset_count; ++i)
            {
                if ((data_start + offset_table[i]) >= end)
                {
                    throw 44;
                }
                current = data_start + offset_table[i];
                data_blocks[i] = read_packed_block(current, end);

                printf("data_blocks: packed_size: %u, unpacked_size: %u\n", data_blocks[i].packed_data.size(), data_blocks[i].unpacked_size);
            }

            {
                int last = sorted_table[0];
                for (int i = 1; i < sorted_table.size(); ++i)
                {
                    const int distance = sorted_table[i] - last;

                    const int expected_distance = sizeof(uint32_t) + sizeof(uint32_t) +
                        data_blocks[i - 1].packed_data.size();

                    printf("distance: %i, expected-distance: %i\n", distance, expected_distance);
                    if (distance != expected_distance)
                    {
                        printf("gap between packed blocks\n");
                    }

                    last = sorted_table[i];
                }
            }

            {
                // size of the parts + offsets fits exact the file size? no gaps?
                std::size_t result_size = sizeof(uint16_t) + offset_count * sizeof(uint32_t);
                for (size_t i = 0; i < offset_count; ++i) {
                    result_size += sizeof(uint32_t) + sizeof(uint32_t) +
                        data_blocks[i].packed_data.size();
                }
                if (result_size != content.size())
                {
                    int last_end = 0;
                    for (size_t i = 0; i < offset_count; ++i)
                    {
                        int offset = offset_table[i];
                        int gap = offset - last_end;
                        assert(gap == 0);
                        int block_size = 2 * sizeof(uint32_t) + data_blocks[i].packed_data.size();
                        int block_end = offset + block_size;
                        printf("gap: %i, offset: %u, block_size: %u, block_end: %i\n", gap, offset_table[i], block_size, block_end);
                        last_end = block_end;
                    }

                    if (last_end < content.size() - sizeof(uint16_t)+offset_count*sizeof(uint32_t))
                    {
                        // only Mystical: MYSJEUCG.1 and MYSJEUEG.2

                        printf("%u bytes remaining after last block\n", left(content.data()+last_end, end));

                        const uint8_t* const begin = content.data() + last_end;
                        size_t size = content.data() + content.size() - begin;
                        printf("%s\n", hexdump(begin, size, 16).c_str());
                        int brk = 1;
                    }

                    int brk = 1;
                }
            }
        }

        for (size_t i = 0; i < data_blocks.size(); ++i) {
            const auto& db = data_blocks[i];

            if (db.packed_data.size() == 0)
            {
                //assert(false);
                //throw 5; // is that ok?

                // not packed block?
            }
            if (db.unpacked_size == 0)
            {
                return 6;
            }

            printf("  [%zu] packed_size: %zu, unpacked_size: %u\n", i, db.packed_data.size(), db.unpacked_size);

            const std::vector<uint8_t> uncompressed = uncompress(db.packed_data, db.unpacked_size);

            if (extract)
            {
                char cc1_block_filepath[1024]{};
                sprintf(cc1_block_filepath, "%s_uncompressed_block%05zu.bin", cc_filepath.c_str(), i);
                printf("  write: %s\n", cc1_block_filepath);
                write_binary_file(cc1_block_filepath, uncompressed.data(), uncompressed.size());
            }
        }

        return 0;
    }
    catch (...)
    {
        return 20;
    }

    return 0;
}

int do_extract(const std::string cc_filepath, const bool extract)
{
    const std::vector<uint8_t> content = read_binary_file(cc_filepath);

    printf("try extracting as CC0\n");
    int res = cc0_uncompress(cc_filepath, content, extract);
    if (res == 0)
    {
        printf("CC0 successfull uncompressed\n");
        return 0;
    }
    printf("not a CC0!\n");

    printf("try extracting as CC1\n");
    res = cc1_uncompress(cc_filepath, content, extract);
    if (res == 0)
    {
        printf("CC1 successfull uncompressed\n");
        return 0;
    }
    printf("not a CC1!\n");

    printf("unknown file format!\n");

    return 1;
}

bool part_uncompress_unit_test();
bool uncompress_unit_test();

int main(int argc, char* argv[])
{
    // simple test in debug build
    assert(part_uncompress_unit_test());
    assert(uncompress_unit_test());

    if ((argc < 2) || (argc > 3))
    {
        printf("uncompress_cc1 CC-FILE [e]\n");
        return -1;
    }

    const std::string cc_filepath = argv[1];
    printf("%s\n", cc_filepath.c_str());

    bool extract = false;
    if (argc == 3)
    {
        const std::string arg2 = argv[2];
        if (arg2 != "e")
        {
            printf("optional second argument needs to be 'e'\n");
            return -1;
        }
        extract = true;
    }

    return do_extract(cc_filepath, extract);
}

bool part_uncompress_unit_test()
{
    const std::vector<uint8_t> output_ref{ 0xFF, 0x36, 0x5C, 0x8B, 0xFF, 0x36, 0x5A, 0x8B, 0xE8 };

    // very strange: 3*96+256 = 544 bytes for "packing" 9 bytes?

    constexpr size_t SIZE = 96;

    tables_t tables;
    tables.table0 = {
        0xFF, 0x50, 0xC4, 0x83, 0xFF, 0x44, 0xC7, 0xFF, 0x83, 0x00, 0x33, 0x8B, 0x83, 0xF8, 0x17, 0x53,
        0x36, 0x15, 0x01, 0x5B, 0x60, 0x8B, 0x4A, 0x62, 0xFF, 0x00, 0x5C, 0x5A, 0x15, 0x26, 0xC7, 0x17,
        0x8D, 0x60, 0x44, 0x42, 0x66, 0x7A, 0x85, 0x7A, 0x85, 0x61, 0x35, 0x89, 0x00, 0x01, 0x4A, 0x50,
        0x58, 0x5D, 0x00, 0x94, 0x6B, 0x15, 0xAB, 0xAE, 0xAB, 0x17, 0x3E, 0x55, 0xAF, 0x55, 0xAF, 0x83,
        0x33, 0x03, 0x00, 0x1D, 0x2E, 0x23, 0xCB, 0xCC, 0xCB, 0x89, 0x23, 0xCE, 0xD0, 0x1C, 0xDE, 0xA9,
        0xAB, 0xD1, 0xFF, 0x2A, 0xDF, 0x35, 0x35, 0xE4, 0xEA, 0x62, 0x36, 0x36, 0x1E, 0x26, 0xA6, 0x24 };
    assert(tables.table0.size() == SIZE);
    tables.table1 = {
        0xFF, 0xE8, 0x5E, 0x46, 0x36, 0x44, 0x06, 0x76, 0xC4, 0x00, 0xC0, 0xE5, 0x3E, 0x26, 0xF8, 0x02,
        0x06, 0x51, 0x00, 0x89, 0x07, 0x46, 0x52, 0x50, 0x46, 0x10, 0x8B, 0x8B, 0xF4, 0xFF, 0x46, 0xF4,
        0x2A, 0x04, 0x88, 0x88, 0x69, 0x02, 0x67, 0x37, 0xE8, 0x57, 0x04, 0x46, 0x52, 0x39, 0x10, 0x8B,
        0x78, 0xC3, 0x74, 0x10, 0x7A, 0x04, 0x26, 0x8B, 0x07, 0x04, 0x01, 0x8B, 0xEC, 0x83, 0xEC, 0x7E,
        0x58, 0xE9, 0xA3, 0x33, 0x5C, 0x65, 0x23, 0x5C, 0xE8, 0x16, 0x6F, 0x23, 0x73, 0x53, 0x00, 0x37,
        0x02, 0xE0, 0xFF, 0x89, 0x56, 0xFA, 0xFE, 0x35, 0xFC, 0xF6, 0x08, 0x04, 0xB8, 0x88, 0x01, 0x7E };
    assert(tables.table1.size() == SIZE);
    tables.table3 = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00,
        0x00, 0x00, 0x00, 0x0B, 0x00, 0x07, 0x5C, 0x28, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0C, 0x00, 0x00, 0x00,
        0x00, 0x0D, 0x17, 0x10, 0x00, 0x3E, 0x00, 0x0F, 0x31, 0x00, 0x00, 0x11, 0x1B, 0x32, 0x00, 0x12,
        0x15, 0x14, 0x18, 0x19, 0x00, 0x1A, 0x1C, 0x1D, 0x1E, 0x1F, 0x00, 0x20, 0x00, 0x21, 0x00, 0x22,
        0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x2B, 0x2C, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x2F,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x33, 0x00, 0x34, 0x00, 0x39, 0x00, 0x00, 0x38, 0x3F,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x41, 0x42, 0x43, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x49, 0x48, 0x00, 0x4C, 0x00,
        0x4D, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x4F, 0x50, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x55,
        0x00, 0x54, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x5A, 0x00, 0x5B,
        0x00, 0x5D, 0x5E, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    assert(tables.table3.size() == 256);
    tables.table4 = {
        0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0E, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x25, 0x00, 0x26, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x03, 0x00, 0x00, 0x3B, 0x3C, 0x3D,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x46, 0x47, 0x00, 0x00, 0x4A, 0x4B, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x56, 0x57, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 };
    assert(tables.table4.size() == SIZE);

    constexpr uint8_t var2 = 0x48;
    std::vector<uint8_t> output(9);
    uint8_t* output_ptr = output.data();
    uncompress_part0(output_ptr, tables, var2);
    return output == output_ref;
}

bool uncompress_unit_test()
{
    const uint8_t compressed_example[] = {
        0x04, 0x01, 0xBA, 0x01, 0x0C, 0x15, 0x19, 0x15, 0x00, 0x0C, 0x15, 0x19, 0x00, 0x0C, 0x15, 0x19, 0xE9, 0x10, 0x0A,
        0x15, 0x15, 0x19, 0x52, 0x01, 0x40, 0x80, 0x15, 0x19, 0x00, 0x0B, 0x01, 0x16, 0x01, 0x19, 0x29, 0x01, 0x40, 0x15,
        0x19, 0x0C, 0x03, 0x01, 0x13, 0x01, 0x19, 0x04, 0x0C, 0x00, 0x08, 0x0C, 0x00, 0xFD, 0x04, 0xFD, 0x04, 0xA9, 0x05,
        0xFD, 0x04, 0x58, 0x05, 0xA7, 0x01, 0xD7, 0x01, 0x07, 0x02, 0x37, 0x02, 0x67, 0x02, 0x97, 0x02, 0xC7, 0x02, 0xF7,
        0x02, 0x27, 0x03, 0x57, 0x03, 0x87, 0x03, 0xB7, 0x03, 0x3A, 0x02, 0x38, 0x02, 0x37, 0x02, 0x35, 0x02, 0x34, 0x02,
        0x33, 0x02, 0x31, 0x02, 0x30, 0x02, 0x2F, 0x02, 0x2D, 0x02, 0x2C, 0x02, 0x2B, 0x02, 0x29, 0x02, 0x28, 0x02, 0x27,
        0x02, 0x25, 0x02, 0x24, 0x02, 0x23, 0x02, 0x21, 0x02, 0x20, 0x02, 0x1F, 0x02, 0x1D, 0x02, 0x1C, 0x02, 0x1B, 0x02,
        0x1A, 0x02, 0x18, 0x02, 0x17, 0x02, 0x16, 0x02, 0x14, 0x02, 0x13, 0x02, 0x12, 0x02, 0x11, 0x02, 0x0F, 0x02, 0x0E,
        0x02, 0x0D, 0x02, 0x0B, 0x02, 0x0A, 0x02, 0x09, 0x02, 0x08, 0x02, 0x06, 0x02, 0x05, 0x02, 0x04, 0x02, 0x03, 0x02,
        0x02, 0x02, 0x00, 0x02, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x01, 0xFB, 0x01, 0xFA, 0x01, 0xF9, 0x01, 0xF8, 0x01, 0xF6,
        0x01, 0xF5, 0x01, 0xF4, 0x01, 0xF3, 0x01, 0xF2, 0x01, 0xF0, 0x01, 0xEF, 0x01, 0xEE, 0x01, 0xED, 0x01, 0xEC, 0x01,
        0xEA, 0x01, 0xE9, 0x01, 0xE8, 0x01, 0xE7, 0x01, 0xE6, 0x01, 0xE4, 0x01, 0xE3, 0x01, 0xE2, 0x01, 0xE1, 0x01, 0xE0,
        0x01, 0xDF, 0x01, 0xDE, 0x01, 0xDC, 0x01, 0xDB, 0x01, 0xDA, 0x01, 0xD9, 0x01, 0xD8, 0x01, 0xD7, 0x01, 0xD6, 0x01,
        0xD4, 0x01, 0xD3, 0x01, 0xD2, 0x01, 0xD1, 0x01, 0xD0, 0x01, 0xCF, 0x01, 0xCE, 0x01, 0xCD, 0x01, 0xCC, 0x01, 0xCA,
        0x01, 0xC9, 0x01, 0xC8, 0x01, 0xC7, 0x01, 0xC6, 0x01, 0xC5, 0x01, 0xC4, 0x01, 0xC3, 0x01, 0xC2, 0x01, 0xC1, 0x01,
        0xC0, 0x01, 0xBE, 0x01, 0xBD, 0x01, 0xBC, 0x01, 0xBB, 0x01, 0xBA, 0x01, 0xB9, 0x01, 0xB8, 0x01, 0xB7, 0x01, 0xB6,
        0x01, 0xB5, 0x01, 0xB4, 0x01, 0xB3, 0x01, 0xB2, 0x01, 0xB1, 0x01, 0xB0, 0x01, 0xAF, 0x01, 0xAE, 0x01, 0xAD, 0x01,
        0xAC, 0x01, 0xAB, 0x01, 0xA9, 0x01, 0xA8, 0x01, 0xA7, 0x01, 0xA6, 0x01, 0xA5, 0x01, 0xA4, 0x01, 0xA3, 0x01, 0xA2,
        0x01, 0xA1, 0x01, 0xA0, 0x01, 0x9F, 0x01, 0x9E, 0x01, 0x9D, 0x01, 0x9C, 0x01, 0x9B, 0x01, 0x9A, 0x01, 0x99, 0x01,
        0x98, 0x01, 0x97, 0x01, 0x96, 0x01, 0x96, 0x01, 0x95, 0x01, 0x94, 0x01, 0x93, 0x01, 0x92, 0x01, 0x91, 0x01, 0x90,
        0x01, 0x8F, 0x01, 0x8E, 0x01, 0x8D, 0x01, 0x8C, 0x01, 0x8B, 0x01, 0x8A, 0x01, 0x89, 0x01, 0x88, 0x01, 0x87, 0x01,
        0x86, 0x01, 0x85, 0x01, 0x84, 0x01, 0x83, 0x01, 0x82, 0x01, 0x81, 0x01, 0x80, 0x01, 0x80, 0x01, 0x7F, 0x01, 0x7E,
        0x01, 0x7D, 0x01, 0x7C, 0x01, 0x7B, 0x01, 0x7A, 0x01, 0x79, 0x01, 0x78, 0x01, 0x77, 0x01, 0x76, 0x01, 0x75, 0x01,
        0x75, 0x01, 0x74, 0x01, 0x73, 0x01, 0x72, 0x01, 0x71, 0x01, 0x70, 0x01, 0x6F, 0x01, 0x6E, 0x01, 0x6D, 0x01, 0x6D,
        0x01, 0x6C, 0x23, 0x01, 0x28, 0x04, 0x16, 0x6C, 0x6D, 0x6E, 0x6F, 0x71, 0x72, 0x76, 0x79, 0x7A, 0x7C, 0x7D, 0x7E,
        0x82, 0x84, 0x86, 0x87, 0x8E, 0x91, 0x92, 0x93, 0x94, 0x96, 0x94, 0x96, 0x97, 0x99, 0x9A, 0x9B, 0x9F, 0xA2, 0xA3,
        0xA2, 0xA4, 0xA5, 0x00, 0xF7, 0x47, 0x26, 0xD0, 0x45, 0x00, 0x00, 0xF7, 0x45, 0x88, 0xF7, 0x16, 0x6E, 0x88, 0x5E,
        0x00, 0x04, 0x80, 0x6C, 0xF7, 0x03, 0x94, 0x96, 0x87, 0x84, 0x8C, 0x8E, 0x52, 0x89, 0x83, 0xA2, 0x6F, 0x40, 0x8B,
        0x00, 0xC2, 0x04, 0x8A, 0xE9, 0x02, 0x74, 0x75, 0x05, 0x04, 0x4F, 0x6D, 0x16, 0x44, 0x45, 0xC3, 0x40, 0x2E, 0x74,
        0x00, 0x71, 0x55, 0x04, 0x86, 0x74, 0x07, 0x47, 0xA3, 0x01, 0x4F, 0x4F, 0x04, 0x6F, 0x76, 0x77, 0x01, 0x6B, 0x01,
        0x6A, 0x01, 0x69, 0x01, 0x68, 0x01, 0x67, 0x01, 0x67, 0x01, 0x66, 0x01, 0x65, 0x01, 0x64, 0x01, 0x63, 0x01, 0x62,
        0x01, 0x61, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5F, 0x01, 0x5E, 0x01, 0x5D, 0x01, 0x5C, 0x01, 0x5B, 0x01, 0x5B, 0x01,
        0x5A, 0x01, 0x59, 0x01, 0x58, 0x01, 0x57, 0x01, 0x56, 0x01, 0x56, 0x01, 0x55, 0x01, 0x54, 0x01, 0x53, 0x01, 0x9B,
        0x9B, 0x51, 0x01, 0x50, 0x01, 0x4F, 0x01, 0x4E, 0x01, 0x4D, 0x01, 0x4D, 0x01, 0x4C, 0x01, 0x4B, 0x01, 0x4A, 0x01,
        0x49, 0x01, 0x49, 0x01, 0x48, 0x01, 0x47, 0x01, 0x46, 0x01, 0x46, 0x01, 0x45, 0x01, 0x44, 0x01, 0x43, 0x01, 0x42,
        0x01, 0x42, 0x01, 0x41, 0x01, 0x40, 0x01, 0x3F, 0x01, 0x3F, 0x01, 0x3E, 0x01, 0x3D, 0x01, 0x3C, 0x01, 0x3B, 0x01,
        0x3B, 0x01, 0x3A, 0x01, 0x39, 0x01, 0x38, 0x01, 0x38, 0x01, 0x37, 0x01, 0x36, 0x01, 0x35, 0x01, 0x35, 0x01, 0x34,
        0x01, 0x33, 0x01, 0x32, 0x01, 0x32, 0x01, 0x31, 0x01, 0x30, 0x01, 0x30, 0x01, 0x2F, 0x01, 0x2E, 0x01, 0x2D, 0x01,
        0x2D, 0x01, 0x2C, 0x01, 0x2B, 0x01, 0x2B, 0x01, 0x2A, 0x01, 0x29, 0x01, 0x28, 0x01, 0x28, 0x01, 0x27, 0x01, 0x26,
        0x01, 0x25, 0x01, 0x25, 0x01, 0x24, 0x01, 0x23, 0x01, 0x23, 0x01, 0x22, 0x01, 0x21, 0x01, 0x21, 0x01, 0x20, 0x01,
        0x1F, 0x01, 0x1F, 0x01, 0x1E, 0x01, 0x1D, 0x01, 0x80, 0xA0, 0xC0, 0x1D, 0x06, 0x78, 0x06, 0x47, 0x06, 0x8D, 0x06,
        0x8C, 0x06, 0x43, 0x06, 0x0C, 0x06, 0x79, 0x79, 0x79, 0x16, 0x00, 0x01, 0x01, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x00, 0xCB, 0x57, 0x53, 0x33, 0xC0, 0x8A, 0xC1, 0x24, 0x0F, 0xD1, 0xE0, 0x8B, 0xF8, 0x2E, 0x8B, 0xBD, 0x8F, 0x01,
        0xF7, 0xC5, 0x80, 0x72, 0x11, 0xF6, 0xC1, 0x0F, 0x75, 0x0C, 0xBF, 0xE7, 0x03, 0x8A, 0xC1, 0xA8, 0x70, 0x74, 0x03,
        0x80, 0xE9, 0x10, 0xF6, 0xC1, 0x91, 0x03, 0xBA, 0x40, 0x00, 0x52, 0x8B, 0xC5, 0x98, 0xD1, 0xE0, 0x03, 0xF8, 0x8B,
        0x05, 0x80, 0xE1, 0x70, 0xA2, 0xA2, 0x80, 0xE9, 0x07, 0xF6, 0xD9, 0xD3, 0xE0, 0x59, 0xF7, 0xC1, 0xA4, 0x06, 0xB9,
        0x87, 0x5B, 0x5F, 0xC3, 0x33, 0xC9, 0x5B, 0x5F, 0xC3, 0xB0, 0xB6, 0xE6, 0x43, 0xE4, 0x61, 0x24, 0xFC, 0xE6, 0x61,
        0xC3, 0x79, 0x02, 0x72, 0x14, 0x6E, 0x64, 0x01, 0xF6, 0xC4, 0x80, 0x75, 0x01, 0xC3, 0x32, 0xC0, 0x89, 0x05, 0x6E,
        0x04, 0x88, 0x71, 0x79, 0x04, 0x76, 0x27, 0x8A, 0x71, 0x0A, 0xC0, 0x74, 0x06, 0xFE, 0xC8, 0x88, 0x71, 0xC3, 0x79,
        0x96, 0x08, 0x7D, 0x96, 0x01, 0xC3, 0x83, 0x0D, 0x04, 0x79, 0x00, 0x20, 0x74, 0x03, 0x83, 0x0D, 0x02, 0x83, 0xE2,
        0xFC, 0xC3, 0x93, 0x02, 0x72, 0x18, 0x6E, 0x64, 0x0C, 0xF6, 0xC4, 0x80, 0x75, 0x01, 0xC3, 0x32, 0xC0, 0xC7, 0x7A,
        0x16, 0xC7, 0x05, 0x16, 0x89, 0x71, 0x56, 0x8B, 0x2D, 0x2E, 0x03, 0xB6, 0x7B, 0x01, 0x2E, 0xFF, 0xA6, 0x85, 0x01,
        0x93, 0x01, 0x76, 0x20, 0x6E, 0x04, 0xA8, 0x40, 0x74, 0x09, 0xC7, 0x05, 0x08, 0x00, 0x94, 0x24, 0x3F, 0x84, 0x06,
        0x82, 0x02, 0x97, 0x83, 0x4D, 0x02, 0x05, 0x8A, 0x45, 0x07, 0x0A, 0xC0, 0x74, 0x0A, 0xFE, 0xC8, 0x97, 0x94, 0x8A,
        0x45, 0x06, 0x0A, 0xC0, 0x74, 0x2C, 0xFE, 0xC8, 0x84, 0x06, 0x82, 0x02, 0x97, 0x82, 0x01, 0x98, 0x03, 0x7A, 0x89,
        0x7A, 0x94, 0x93, 0x00, 0x20, 0x74, 0x04, 0x83, 0x4D, 0x02, 0x02, 0x94, 0x93, 0x04, 0x72, 0x2B, 0x83, 0x65, 0x02,
        0xFB, 0x26, 0xF6, 0x04, 0x91, 0x0D, 0x82, 0x03, 0x98, 0x03, 0x7A, 0x89, 0x7A, 0xEB, 0x9E, 0x82, 0x01, 0x98, 0x03,
        0x7A, 0x89, 0x7A, 0x82, 0x03, 0x97, 0xEB, 0x8A, 0x83, 0x65, 0x02, 0xFE, 0x8B, 0x05, 0x05, 0x02, 0x00, 0x89, 0x05,
        0x5E, 0xE9, 0x47, 0xFF, 0x93, 0x96, 0xEA, 0x7D, 0x96, 0xE3, 0x94, 0x56, 0x57, 0x8B, 0x6D, 0xA9, 0xA4, 0x2E, 0xA9,
        0x02, 0x76, 0x2D, 0xFF, 0x4F, 0x0E, 0x75, 0x24, 0x8B, 0x47, 0x10, 0x89, 0x47, 0x0E, 0xC4, 0x77, 0x0A, 0x26, 0xAD,
        0x89, 0x77, 0x0A, 0x99, 0x0C, 0x8A, 0xCC, 0x32, 0xED, 0x32, 0xE4, 0xD0, 0xE0, 0x8B, 0xF8, 0x9C, 0x2E, 0xFF, 0x95,
        0xEA, 0x03, 0x9D, 0x73, 0xE2, 0x5F, 0x86, 0xC3, 0xC4, 0x47, 0x06, 0x89, 0x47, 0x0A, 0x99, 0x0C, 0x83, 0x67, 0x04,
        0xFD, 0xC7, 0x47, 0x18, 0x16, 0xEB, 0xCA, 0x53, 0x1E, 0x51, 0x8B, 0x07, 0x50, 0x2E, 0xFF, 0x1E, 0xFE, 0x03, 0x83,
        0xC4, 0x04, 0x1F, 0x5B, 0xC3, 0xA3, 0x02, 0x7D, 0x20, 0x76, 0x1A, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27,
        0xA3, 0x40, 0x7D, 0x00, 0x91, 0x07, 0xA5, 0x02, 0x83, 0x64, 0x04, 0xFB, 0xC3, 0x7C, 0x17, 0xC3, 0xFF, 0x47, 0x18,
        0x9F, 0x15, 0x8A, 0x2F, 0x33, 0xED, 0x8B, 0x57, 0x04, 0xE8, 0xC6, 0xFD, 0x89, 0x47, 0x23, 0x8B, 0x6D, 0x25, 0xFF,
        0xBF, 0x0B, 0xC1, 0x89, 0x6D, 0xA9, 0x96, 0x0D, 0xA5, 0x1F, 0x83, 0x4C, 0x02, 0x02, 0xA5, 0x21, 0x83, 0x0C, 0x02,
        0xC3, 0x26, 0xAC, 0x8A, 0xE8, 0x03, 0x4F, 0x13, 0x9F, 0x10, 0x9F, 0x0E, 0x89, 0x77, 0x0A, 0x99, 0x0C, 0xC3, 0xC3,
        0x7C, 0x12, 0xB0, 0x10, 0xF6, 0xE1, 0x2E, 0xC4, 0x36, 0x18, 0x04, 0x03, 0xF0, 0x89, 0x77, 0x25, 0x99, 0x27, 0xC3,
        0x50, 0x52, 0x06, 0x1E, 0x56, 0x57, 0x55, 0x2E, 0xF6, 0x06, 0x00, 0x04, 0xFF, 0x74, 0x08, 0x5D, 0x5F, 0x5E, 0x1F,
        0x07, 0x5A, 0x58, 0xC3, 0xBB, 0x9B, 0x8B, 0xF3, 0x2E, 0xA1, 0x0C, 0x9A, 0x18, 0x8E, 0xA1, 0x0E, 0x9A, 0x1A, 0x04,
        0xE8, 0xEB, 0xFE, 0x7D, 0x04, 0x72, 0x1A, 0x2E, 0xA1, 0x10, 0x9A, 0x18, 0x8E, 0xA1, 0x12, 0x9A, 0x1A, 0x04, 0x53,
        0x8B, 0x5F, 0x02, 0x8B, 0xF3, 0xE8, 0xCB, 0xFE, 0x5B, 0x8B, 0xDE, 0xC4, 0x77, 0x25, 0x46, 0x8B, 0x57, 0x23, 0x26,
        0xF6, 0x44, 0x0C, 0x91, 0x06, 0x8B, 0x7F, 0x1F, 0xE8, 0xC9, 0xFD, 0x8A, 0xC2, 0xE6, 0x42, 0x8A, 0xC6, 0xE6, 0x42,
        0x83, 0xC6, 0x0D, 0x33, 0xD2, 0x26, 0xF6, 0x44, 0x01, 0x91, 0x09, 0xBA, 0x03, 0x00, 0x8B, 0x7F, 0x21, 0xE8, 0x61,
        0xFD, 0xE4, 0x61, 0x24, 0xFC, 0x0A, 0xC2, 0xE6, 0x61, 0x5D, 0x5F, 0x5E, 0x1F, 0x07, 0x5A, 0x58, 0xC3, 0xC3, 0x8C,
        0xC8, 0x8B, 0xD0, 0xB8, 0xFE, 0x03, 0xC3, 0x8B, 0xEE, 0xBE, 0xFF, 0xFF, 0x0B, 0xED, 0x75, 0x03, 0xBD, 0x01, 0x00,
        0xBB, 0x9B, 0xBF, 0x01, 0x00, 0x85, 0xEF, 0x74, 0x08, 0x8B, 0x47, 0x06, 0x0B, 0x47, 0x08, 0x75, 0x03, 0xE9, 0xC1,
        0x00, 0x92, 0x01, 0x74, 0x1F, 0x0B, 0xC9, 0x74, 0x09, 0x2E, 0xC6, 0x06, 0x00, 0x04, 0x00, 0xEB, 0x0A, 0x90, 0x2E,
        0xC6, 0x06, 0x00, 0x04, 0x01, 0xE8, 0x00, 0xFD, 0x92, 0x04, 0x74, 0x03, 0x9F, 0x13, 0x6C, 0x40, 0x72, 0x13, 0x7D,
        0xA4, 0x0C, 0xA3, 0x40, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x6C, 0x80, 0x72, 0x11, 0xC6, 0x47, 0x1D,
        0x0F, 0xC6, 0x47, 0x1A, 0x0F, 0xC6, 0x47, 0x1E, 0x00, 0xC7, 0x6D, 0x02, 0x00, 0x6C, 0x20, 0x72, 0x04, 0xA3, 0x20,
        0x92, 0x20, 0x74, 0x17, 0x6C, 0x10, 0x76, 0x11, 0x51, 0xA2, 0x6F, 0x83, 0xE1, 0x0F, 0x7C, 0x1D, 0x7C, 0x1A, 0x59,
        0x92, 0x91, 0x0E, 0x51, 0xA2, 0x6F, 0x83, 0xE1, 0x0F, 0x7C, 0x1A, 0x59, 0x92, 0x10, 0x74, 0x06, 0x7C, 0x1B, 0x7C,
        0x1C, 0x6C, 0x10, 0x72, 0x1F, 0x92, 0x20, 0x75, 0x12, 0x7D, 0xA4, 0x12, 0x3B, 0x77, 0x18, 0x7F, 0x0D, 0xA5, 0x18,
        0xEB, 0x08, 0x90, 0x38, 0x4F, 0x1D, 0x74, 0x02, 0x33, 0xF6, 0xD1, 0xE7, 0x83, 0xC3, 0x29, 0x81, 0x22, 0x00, 0xAD,
        0x02, 0x1B, 0x1C, 0x22, 0x24, 0x28, 0x2A, 0x2D, 0x30, 0x34, 0x37, 0x3D, 0x3F, 0x48, 0x4B, 0x4E, 0x4B, 0x58, 0x60,
        0x61, 0x62, 0x61, 0x63, 0x64, 0x63, 0x64, 0x63, 0x64, 0x65, 0x64, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x26, 0xF7, 0xD1,
        0x04, 0x04, 0x52, 0xD0, 0x1C, 0x19, 0x8B, 0x00, 0x83, 0xC7, 0x25, 0x4B, 0x89, 0xCD, 0x8B, 0x24, 0x61, 0x01, 0x3F,
        0x63, 0x64, 0x63, 0x64, 0x83, 0x64, 0xBB, 0x83, 0x89, 0x0B, 0x04, 0x22, 0x8B, 0xC2, 0xEA, 0x2E, 0x40, 0x01, 0xE9,
        0x00, 0x01, 0x77, 0x74, 0x4F, 0x47, 0x34, 0x8C, 0x47, 0x21, 0xFE, 0x8C, 0x06, 0x00, 0x28, 0x48, 0x4E, 0x4F, 0x27,
        0xC3, 0x29, 0x2A, 0x4C, 0x3E, 0xD0, 0x26, 0x22, 0xFB, 0x7B, 0x01, 0x72, 0x0C, 0x8B, 0xC6, 0x30, 0x02, 0x74, 0x03,
        0xE8, 0x00, 0xFF, 0xC3, 0xE9, 0x16, 0xFF, 0x8B, 0xEE, 0xBE, 0xFF, 0xFF, 0x0B, 0xED, 0x75, 0x03, 0xBD, 0x61, 0xBB,
        0x29, 0x01, 0xBF, 0x61, 0x85, 0xEF, 0x75, 0x03, 0xE9, 0xC7, 0x00, 0x30, 0x04, 0x74, 0x03, 0x89, 0x4F, 0x13, 0x1C,
        0x40, 0x3D, 0x0C, 0x63, 0x1C, 0x80, 0x3D, 0x46, 0x30, 0x40, 0x74, 0x07, 0xF7, 0x47, 0x28, 0x3D, 0x39, 0x56, 0x51,
        0x2E, 0xC4, 0x36, 0x14, 0x04, 0x8B, 0xC1, 0x8B, 0xCE, 0x8D, 0x74, 0x12, 0xD1, 0xE0, 0xD1, 0xE0, 0x03, 0xF0, 0x1B,
        0x04, 0x03, 0xC1, 0x4B, 0x06, 0x8C, 0x47, 0x08, 0x48, 0x04, 0x02, 0x80, 0xC6, 0x47, 0x1D, 0x0F, 0xC6, 0x47, 0x1A,
        0x0F, 0xC6, 0x47, 0x1E, 0x00, 0x37, 0x02, 0x66, 0x04, 0x04, 0x59, 0x5E, 0x1C, 0x20, 0x3D, 0x04, 0x3F, 0x04, 0x20,
        0x30, 0x20, 0x74, 0x17, 0x1C, 0x10, 0x00, 0x75, 0x11, 0x51, 0x2D, 0x2D, 0x2D, 0x83, 0xE1, 0x0F, 0x88, 0x4F, 0x1D,
        0x88, 0x4F, 0x1A, 0x59, 0x30, 0x80, 0x74, 0x0E, 0x51, 0x2D, 0x2D, 0x2D, 0x83, 0xE1, 0x0F, 0x88, 0x4F, 0x1A, 0x59,
        0x1C, 0x10, 0x3D, 0x1F, 0x30, 0x20, 0x75, 0x12, 0xF7, 0x47, 0x28, 0x00, 0x75, 0x12, 0x3B, 0x77, 0x18, 0x7F, 0x0D,
        0x37, 0x18, 0xEB, 0x08, 0x90, 0x38, 0x4F, 0x1D, 0x74, 0x02, 0x33, 0xF6, 0xD1, 0xE7, 0x65, 0x81, 0xFB, 0x2A, 0x72,
        0x03, 0x8B, 0xC6, 0xC3, 0xE9, 0x21, 0xFF, 0x8E, 0xC2, 0x33, 0xC9, 0xBD, 0x61, 0x64, 0x60, 0x8B, 0xD1, 0xD1, 0xE2,
        0xD1, 0xE2, 0x03, 0xFA, 0x1B, 0x45, 0x08, 0x1B, 0x55, 0x0A, 0x68, 0x75, 0x15, 0xD1, 0xE5, 0x83, 0xC7, 0x04, 0x41,
        0x83, 0xF9, 0x0B, 0x75, 0xE9, 0x33, 0xC0, 0x4B, 0x06, 0x4B, 0x08, 0xEB, 0x11, 0x2E, 0x85, 0x2E, 0x02, 0x04, 0x74,
        0xE4, 0x60, 0x03, 0xF8, 0x89, 0x7F, 0x06, 0x8C, 0x47, 0x08, 0x63, 0x41, 0x65, 0x83, 0xF9, 0x01, 0x72, 0xAF, 0x1B,
        0x44, 0x04, 0x1B, 0x54, 0x06, 0x68, 0x74, 0x1B, 0xFE, 0x03, 0xF8, 0x26, 0x80, 0x7D, 0x04, 0x42, 0x74, 0x09, 0x1B,
        0x05, 0x1B, 0x55, 0x02, 0xEB, 0xE8, 0x83, 0xC7, 0x24, 0x67, 0x0C, 0x62, 0x0E, 0x62, 0x1A, 0x04, 0xC3, 0x8E, 0xC2,
        0x60, 0x8B, 0xF7, 0x2E, 0x67, 0x14, 0x62, 0x16, 0x04, 0x1B, 0x44, 0x04, 0x1B, 0x54, 0x06, 0x68, 0x74, 0x17, 0x60,
        0x03, 0xF8, 0x26, 0x80, 0x7D, 0x04, 0x42, 0x74, 0x09, 0x1B, 0x05, 0x1B, 0x55, 0x02, 0xEB, 0xE8, 0x83, 0xC7, 0x24,
        0x67, 0x10, 0x62, 0x12, 0x04, 0xBB, 0x29, 0x01, 0x63, 0x65, 0x81, 0xFB, 0x2A, 0x72, 0xEB, 0xC3, 0xB8, 0x4D, 0x42,
        0xBA, 0x61, 0xC3, 0x33, 0xC0, 0x8E, 0xC0, 0xBE, 0xC0, 0x03, 0x2E, 0xA1, 0x08, 0x69, 0x89, 0x24, 0xA1, 0x0A, 0x69,
        0x89, 0x44, 0x02, 0x2E, 0x8E, 0x06, 0x2C, 0x00, 0xB4, 0x49, 0x58, 0x8C, 0xC8, 0x8E, 0xC0, 0xB4, 0x49, 0x58, 0xC3,
        0x64, 0x33, 0xC9, 0x63, 0x37, 0x02, 0x66, 0x28, 0xC7, 0x44, 0x4E, 0x4C, 0x27, 0x65, 0x41, 0x83, 0xF9, 0x01, 0x75,
        0xDC, 0xE8, 0x11, 0xFA, 0xC3, 0x64, 0x88, 0x57, 0x17, 0x32, 0xED, 0x89, 0x4F, 0x15, 0x8A, 0x2F, 0x33, 0xED, 0x8B,
        0x57, 0x04, 0x33, 0xD2, 0xE8, 0x9B, 0xF9, 0x4B, 0x23, 0x8B, 0x47, 0x04, 0x25, 0xFF, 0xBF, 0x0B, 0xC1, 0x4B, 0x04,
        0xA9, 0x00, 0x40, 0x74, 0x0D, 0x37, 0x21, 0x83, 0x0C, 0x02, 0x37, 0x1F, 0x66, 0x02, 0x02, 0xC3, 0xC3, 0x64, 0x0A,
        0xC0, 0x75, 0x1E, 0x8B, 0xC2, 0x0B, 0xC6, 0x75, 0x05, 0x8C, 0xCA, 0xBE, 0x34, 0x89, 0x57, 0x27, 0x89, 0x77, 0x25,
        0x88, 0x6F, 0x12, 0x37, 0x1F, 0x66, 0x02, 0x01, 0xC4, 0x77, 0x25, 0xC3, 0xA2, 0x06, 0x3E, 0x0A, 0x7B, 0x04, 0x2B,
        0x09, 0xB9, 0x09, 0x3E, 0x07, 0x3A, 0x08, 0x16, 0x0A, 0x0F, 0x0A, 0x36, 0x07, 0x35, 0x07, 0x6B, 0x0A, 0xA4, 0x0A,
        0xA3, 0x0A, 0xEB, 0x0E, 0x49, 0x46, 0x47, 0x4D, 0x20, 0x42, 0x55, 0x5A, 0x45, 0x52, 0x20, 0x50, 0x43, 0x00, 0x1E,
        0x06, 0x56, 0x57, 0x53, 0x51, 0x55, 0xFC, 0x8C, 0xCB, 0x8E, 0xDB, 0x33, 0xDB, 0x8A, 0xDC, 0x2E, 0xFF, 0x97, 0xCA,
        0x0A, 0x5D, 0x59, 0x5B, 0x5F, 0x5E, 0x07, 0x1F, 0xCF, 0xBC, 0x00, 0x01, 0xBA, 0x87, 0x0B, 0x6A, 0x6A, 0x42, 0xB4,
        0x4A, 0x58, 0x33, 0xC0, 0x8E, 0xC0, 0xBE, 0xC0, 0x03, 0x1B, 0x3C, 0x2E, 0x67, 0x08, 0x69, 0x8E, 0x5C, 0x02, 0x2E,
        0x8C, 0x1E, 0x0A, 0x04, 0x8B, 0xC7, 0x8C, 0xDA, 0x68, 0x74, 0x19, 0x8B, 0x4D, 0x02, 0x8B, 0x55, 0x04, 0x81, 0xF9,
        0x49, 0x46, 0x75, 0x0D, 0x81, 0xFA, 0x47, 0x4D, 0x75, 0x07, 0xB0, 0xFF, 0xB4, 0x4C, 0x58, 0xC3, 0x2E, 0xC7, 0x06,
        0x04, 0x04, 0x2A, 0x2E, 0x8C, 0x0E, 0x06, 0x04, 0xB8, 0xE6, 0x0A, 0x26, 0x89, 0x69, 0x8C, 0x4C, 0x02, 0x32, 0xC0,
        0xBA, 0x13, 0x0B, 0x6A, 0x6A, 0x42, 0xB4, 0x31, 0x58 };

    const uint8_t uncompressed_example[] = {
        0xE9, 0x10, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x01, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x01, 0x16, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
        0x01, 0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0xFD, 0x04, 0xFD, 0x04, 0xA9, 0x05, 0xFD, 0x04, 0x58, 0x05, 0xA7, 0x01, 0xD7, 0x01, 0x07, 0x02, 0x37, 0x02, 0x67,
        0x02, 0x97, 0x02, 0xC7, 0x02, 0xF7, 0x02, 0x27, 0x03, 0x57, 0x03, 0x87, 0x03, 0xB7, 0x03, 0x3A, 0x02, 0x38, 0x02,
        0x37, 0x02, 0x35, 0x02, 0x34, 0x02, 0x33, 0x02, 0x31, 0x02, 0x30, 0x02, 0x2F, 0x02, 0x2D, 0x02, 0x2C, 0x02, 0x2B,
        0x02, 0x29, 0x02, 0x28, 0x02, 0x27, 0x02, 0x25, 0x02, 0x24, 0x02, 0x23, 0x02, 0x21, 0x02, 0x20, 0x02, 0x1F, 0x02,
        0x1D, 0x02, 0x1C, 0x02, 0x1B, 0x02, 0x1A, 0x02, 0x18, 0x02, 0x17, 0x02, 0x16, 0x02, 0x14, 0x02, 0x13, 0x02, 0x12,
        0x02, 0x11, 0x02, 0x0F, 0x02, 0x0E, 0x02, 0x0D, 0x02, 0x0B, 0x02, 0x0A, 0x02, 0x09, 0x02, 0x08, 0x02, 0x06, 0x02,
        0x05, 0x02, 0x04, 0x02, 0x03, 0x02, 0x02, 0x02, 0x00, 0x02, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x01, 0xFB, 0x01, 0xFA,
        0x01, 0xF9, 0x01, 0xF8, 0x01, 0xF6, 0x01, 0xF5, 0x01, 0xF4, 0x01, 0xF3, 0x01, 0xF2, 0x01, 0xF0, 0x01, 0xEF, 0x01,
        0xEE, 0x01, 0xED, 0x01, 0xEC, 0x01, 0xEA, 0x01, 0xE9, 0x01, 0xE8, 0x01, 0xE7, 0x01, 0xE6, 0x01, 0xE4, 0x01, 0xE3,
        0x01, 0xE2, 0x01, 0xE1, 0x01, 0xE0, 0x01, 0xDF, 0x01, 0xDE, 0x01, 0xDC, 0x01, 0xDB, 0x01, 0xDA, 0x01, 0xD9, 0x01,
        0xD8, 0x01, 0xD7, 0x01, 0xD6, 0x01, 0xD4, 0x01, 0xD3, 0x01, 0xD2, 0x01, 0xD1, 0x01, 0xD0, 0x01, 0xCF, 0x01, 0xCE,
        0x01, 0xCD, 0x01, 0xCC, 0x01, 0xCA, 0x01, 0xC9, 0x01, 0xC8, 0x01, 0xC7, 0x01, 0xC6, 0x01, 0xC5, 0x01, 0xC4, 0x01,
        0xC3, 0x01, 0xC2, 0x01, 0xC1, 0x01, 0xC0, 0x01, 0xBE, 0x01, 0xBD, 0x01, 0xBC, 0x01, 0xBB, 0x01, 0xBA, 0x01, 0xB9,
        0x01, 0xB8, 0x01, 0xB7, 0x01, 0xB6, 0x01, 0xB5, 0x01, 0xB4, 0x01, 0xB3, 0x01, 0xB2, 0x01, 0xB1, 0x01, 0xB0, 0x01,
        0xAF, 0x01, 0xAE, 0x01, 0xAD, 0x01, 0xAC, 0x01, 0xAB, 0x01, 0xA9, 0x01, 0xA8, 0x01, 0xA7, 0x01, 0xA6, 0x01, 0xA5,
        0x01, 0xA4, 0x01, 0xA3, 0x01, 0xA2, 0x01, 0xA1, 0x01, 0xA0, 0x01, 0x9F, 0x01, 0x9E, 0x01, 0x9D, 0x01, 0x9C, 0x01,
        0x9B, 0x01, 0x9A, 0x01, 0x99, 0x01, 0x98, 0x01, 0x97, 0x01, 0x96, 0x01, 0x96, 0x01, 0x95, 0x01, 0x94, 0x01, 0x93,
        0x01, 0x92, 0x01, 0x91, 0x01, 0x90, 0x01, 0x8F, 0x01, 0x8E, 0x01, 0x8D, 0x01, 0x8C, 0x01, 0x8B, 0x01, 0x8A, 0x01,
        0x89, 0x01, 0x88, 0x01, 0x87, 0x01, 0x86, 0x01, 0x85, 0x01, 0x84, 0x01, 0x83, 0x01, 0x82, 0x01, 0x81, 0x01, 0x80,
        0x01, 0x80, 0x01, 0x7F, 0x01, 0x7E, 0x01, 0x7D, 0x01, 0x7C, 0x01, 0x7B, 0x01, 0x7A, 0x01, 0x79, 0x01, 0x78, 0x01,
        0x77, 0x01, 0x76, 0x01, 0x75, 0x01, 0x75, 0x01, 0x74, 0x01, 0x73, 0x01, 0x72, 0x01, 0x71, 0x01, 0x70, 0x01, 0x6F,
        0x01, 0x6E, 0x01, 0x6D, 0x01, 0x6D, 0x01, 0x6C, 0x01, 0x6B, 0x01, 0x6A, 0x01, 0x69, 0x01, 0x68, 0x01, 0x67, 0x01,
        0x67, 0x01, 0x66, 0x01, 0x65, 0x01, 0x64, 0x01, 0x63, 0x01, 0x62, 0x01, 0x61, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5F,
        0x01, 0x5E, 0x01, 0x5D, 0x01, 0x5C, 0x01, 0x5B, 0x01, 0x5B, 0x01, 0x5A, 0x01, 0x59, 0x01, 0x58, 0x01, 0x57, 0x01,
        0x56, 0x01, 0x56, 0x01, 0x55, 0x01, 0x54, 0x01, 0x53, 0x01, 0x52, 0x01, 0x52, 0x01, 0x51, 0x01, 0x50, 0x01, 0x4F,
        0x01, 0x4E, 0x01, 0x4D, 0x01, 0x4D, 0x01, 0x4C, 0x01, 0x4B, 0x01, 0x4A, 0x01, 0x49, 0x01, 0x49, 0x01, 0x48, 0x01,
        0x47, 0x01, 0x46, 0x01, 0x46, 0x01, 0x45, 0x01, 0x44, 0x01, 0x43, 0x01, 0x42, 0x01, 0x42, 0x01, 0x41, 0x01, 0x40,
        0x01, 0x3F, 0x01, 0x3F, 0x01, 0x3E, 0x01, 0x3D, 0x01, 0x3C, 0x01, 0x3B, 0x01, 0x3B, 0x01, 0x3A, 0x01, 0x39, 0x01,
        0x38, 0x01, 0x38, 0x01, 0x37, 0x01, 0x36, 0x01, 0x35, 0x01, 0x35, 0x01, 0x34, 0x01, 0x33, 0x01, 0x32, 0x01, 0x32,
        0x01, 0x31, 0x01, 0x30, 0x01, 0x30, 0x01, 0x2F, 0x01, 0x2E, 0x01, 0x2D, 0x01, 0x2D, 0x01, 0x2C, 0x01, 0x2B, 0x01,
        0x2B, 0x01, 0x2A, 0x01, 0x29, 0x01, 0x28, 0x01, 0x28, 0x01, 0x27, 0x01, 0x26, 0x01, 0x25, 0x01, 0x25, 0x01, 0x24,
        0x01, 0x23, 0x01, 0x23, 0x01, 0x22, 0x01, 0x21, 0x01, 0x21, 0x01, 0x20, 0x01, 0x1F, 0x01, 0x1F, 0x01, 0x1E, 0x01,
        0x1D, 0x01, 0x80, 0xA0, 0xC0, 0x1D, 0x06, 0x78, 0x06, 0x47, 0x06, 0x8D, 0x06, 0x8C, 0x06, 0x43, 0x06, 0x0C, 0x06,
        0xF7, 0x05, 0xF7, 0x05, 0xF7, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x57,
        0x53, 0x33, 0xC0, 0x8A, 0xC1, 0x24, 0x0F, 0xD1, 0xE0, 0x8B, 0xF8, 0x2E, 0x8B, 0xBD, 0x8F, 0x01, 0xF7, 0xC5, 0x80,
        0x00, 0x74, 0x11, 0xF6, 0xC1, 0x0F, 0x75, 0x0C, 0xBF, 0xE7, 0x03, 0x8A, 0xC1, 0xA8, 0x70, 0x74, 0x03, 0x80, 0xE9,
        0x10, 0xF6, 0xC1, 0x80, 0x74, 0x03, 0xBA, 0x40, 0x00, 0x52, 0x8B, 0xC5, 0x98, 0xD1, 0xE0, 0x03, 0xF8, 0x8B, 0x05,
        0x80, 0xE1, 0x70, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0x80, 0xE9, 0x07, 0xF6, 0xD9, 0xD3, 0xE0, 0x59,
        0xF7, 0xC1, 0x40, 0x00, 0x75, 0x06, 0xB9, 0x00, 0x40, 0x5B, 0x5F, 0xC3, 0x33, 0xC9, 0x5B, 0x5F, 0xC3, 0xB0, 0xB6,
        0xE6, 0x43, 0xE4, 0x61, 0x24, 0xFC, 0xE6, 0x61, 0xC3, 0xF7, 0x05, 0x02, 0x00, 0x74, 0x14, 0x26, 0x8A, 0x64, 0x01,
        0xF6, 0xC4, 0x80, 0x75, 0x01, 0xC3, 0x32, 0xC0, 0x89, 0x05, 0x26, 0x8A, 0x04, 0x88, 0x45, 0x02, 0xF7, 0x05, 0x04,
        0x00, 0x75, 0x27, 0x8A, 0x45, 0x02, 0x0A, 0xC0, 0x74, 0x06, 0xFE, 0xC8, 0x88, 0x45, 0x02, 0xC3, 0xF7, 0x05, 0x00,
        0x40, 0x74, 0x08, 0xF7, 0x47, 0x04, 0x00, 0x40, 0x74, 0x01, 0xC3, 0x83, 0x0D, 0x04, 0xF7, 0x05, 0x00, 0x20, 0x74,
        0x03, 0x83, 0x0D, 0x02, 0x83, 0xE2, 0xFC, 0xC3, 0xF7, 0x45, 0x02, 0x02, 0x00, 0x74, 0x18, 0x26, 0x8A, 0x64, 0x0C,
        0xF6, 0xC4, 0x80, 0x75, 0x01, 0xC3, 0x32, 0xC0, 0xC7, 0x45, 0x04, 0x00, 0x00, 0xC7, 0x05, 0x00, 0x00, 0x89, 0x45,
        0x02, 0x56, 0x8B, 0x2D, 0x2E, 0x03, 0xB6, 0x7B, 0x01, 0x2E, 0xFF, 0xA6, 0x85, 0x01, 0xF7, 0x45, 0x02, 0x01, 0x00,
        0x75, 0x20, 0x26, 0x8A, 0x04, 0xA8, 0x40, 0x74, 0x09, 0xC7, 0x05, 0x08, 0x00, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0x24,
        0x3F, 0x88, 0x45, 0x06, 0x26, 0x8A, 0x44, 0x02, 0x88, 0x45, 0x07, 0x83, 0x4D, 0x02, 0x05, 0x8A, 0x45, 0x07, 0x0A,
        0xC0, 0x74, 0x0A, 0xFE, 0xC8, 0x88, 0x45, 0x07, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0x8A, 0x45, 0x06, 0x0A, 0xC0, 0x74,
        0x2C, 0xFE, 0xC8, 0x88, 0x45, 0x06, 0x26, 0x8A, 0x44, 0x02, 0x88, 0x45, 0x07, 0x26, 0x8A, 0x44, 0x01, 0x98, 0x03,
        0x45, 0x04, 0x89, 0x45, 0x04, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0xF7, 0x45, 0x02, 0x00, 0x20, 0x74, 0x04, 0x83, 0x4D,
        0x02, 0x02, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0xF7, 0x45, 0x02, 0x04, 0x00, 0x74, 0x2B, 0x83, 0x65, 0x02, 0xFB, 0x26,
        0xF6, 0x04, 0x80, 0x74, 0x0D, 0x26, 0x8A, 0x44, 0x03, 0x98, 0x03, 0x45, 0x04, 0x89, 0x45, 0x04, 0xEB, 0x9E, 0x26,
        0x8A, 0x44, 0x01, 0x98, 0x03, 0x45, 0x04, 0x89, 0x45, 0x04, 0x26, 0x8A, 0x44, 0x03, 0x88, 0x45, 0x07, 0xEB, 0x8A,
        0x83, 0x65, 0x02, 0xFE, 0x8B, 0x05, 0x05, 0x02, 0x00, 0x89, 0x05, 0x5E, 0xE9, 0x47, 0xFF, 0xF7, 0x45, 0x02, 0x00,
        0x40, 0x74, 0xEA, 0xF7, 0x47, 0x04, 0x00, 0x40, 0x74, 0xE3, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0x56, 0x57, 0x8B, 0x47,
        0x04, 0xA9, 0x40, 0x00, 0x75, 0x2E, 0xA9, 0x02, 0x00, 0x75, 0x2D, 0xFF, 0x4F, 0x0E, 0x75, 0x24, 0x8B, 0x47, 0x10,
        0x89, 0x47, 0x0E, 0xC4, 0x77, 0x0A, 0x26, 0xAD, 0x89, 0x77, 0x0A, 0x8C, 0x47, 0x0C, 0x8A, 0xCC, 0x32, 0xED, 0x32,
        0xE4, 0xD0, 0xE0, 0x8B, 0xF8, 0x9C, 0x2E, 0xFF, 0x95, 0xEA, 0x03, 0x9D, 0x73, 0xE2, 0x5F, 0x5E, 0xC3, 0xC3, 0xC4,
        0x47, 0x06, 0x89, 0x47, 0x0A, 0x8C, 0x47, 0x0C, 0x83, 0x67, 0x04, 0xFD, 0xC7, 0x47, 0x18, 0x00, 0x00, 0xEB, 0xCA,
        0x53, 0x1E, 0x51, 0x8B, 0x07, 0x50, 0x2E, 0xFF, 0x1E, 0xFE, 0x03, 0x83, 0xC4, 0x04, 0x1F, 0x5B, 0xC3, 0x83, 0x4F,
        0x04, 0x02, 0xF7, 0x47, 0x04, 0x20, 0x00, 0x75, 0x1A, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x83, 0x4F,
        0x04, 0x40, 0xF7, 0x47, 0x04, 0x00, 0x80, 0x74, 0x07, 0x8B, 0x77, 0x02, 0x83, 0x64, 0x04, 0xFB, 0xC3, 0x88, 0x4F,
        0x17, 0xC3, 0xFF, 0x47, 0x18, 0x89, 0x4F, 0x15, 0x8A, 0x2F, 0x33, 0xED, 0x8B, 0x57, 0x04, 0xE8, 0xC6, 0xFD, 0x89,
        0x47, 0x23, 0x8B, 0x47, 0x04, 0x25, 0xFF, 0xBF, 0x0B, 0xC1, 0x89, 0x47, 0x04, 0xA9, 0x00, 0x40, 0x74, 0x0D, 0x8B,
        0x77, 0x1F, 0x83, 0x4C, 0x02, 0x02, 0x8B, 0x77, 0x21, 0x83, 0x0C, 0x02, 0xC3, 0x26, 0xAC, 0x8A, 0xE8, 0x03, 0x4F,
        0x13, 0x89, 0x4F, 0x10, 0x89, 0x4F, 0x0E, 0x89, 0x77, 0x0A, 0x8C, 0x47, 0x0C, 0xC3, 0xC3, 0x88, 0x4F, 0x12, 0xB0,
        0x10, 0xF6, 0xE1, 0x2E, 0xC4, 0x36, 0x18, 0x04, 0x03, 0xF0, 0x89, 0x77, 0x25, 0x8C, 0x47, 0x27, 0xC3, 0x50, 0x52,
        0x06, 0x1E, 0x56, 0x57, 0x55, 0x2E, 0xF6, 0x06, 0x00, 0x04, 0xFF, 0x74, 0x08, 0x5D, 0x5F, 0x5E, 0x1F, 0x07, 0x5A,
        0x58, 0xC3, 0xBB, 0x52, 0x01, 0x8B, 0xF3, 0x2E, 0xA1, 0x0C, 0x04, 0x2E, 0xA3, 0x18, 0x04, 0x2E, 0xA1, 0x0E, 0x04,
        0x2E, 0xA3, 0x1A, 0x04, 0xE8, 0xEB, 0xFE, 0xF7, 0x47, 0x04, 0x04, 0x00, 0x74, 0x1A, 0x2E, 0xA1, 0x10, 0x04, 0x2E,
        0xA3, 0x18, 0x04, 0x2E, 0xA1, 0x12, 0x04, 0x2E, 0xA3, 0x1A, 0x04, 0x53, 0x8B, 0x5F, 0x02, 0x8B, 0xF3, 0xE8, 0xCB,
        0xFE, 0x5B, 0x8B, 0xDE, 0xC4, 0x77, 0x25, 0x46, 0x8B, 0x57, 0x23, 0x26, 0xF6, 0x44, 0x0C, 0x80, 0x74, 0x06, 0x8B,
        0x7F, 0x1F, 0xE8, 0xC9, 0xFD, 0x8A, 0xC2, 0xE6, 0x42, 0x8A, 0xC6, 0xE6, 0x42, 0x83, 0xC6, 0x0D, 0x33, 0xD2, 0x26,
        0xF6, 0x44, 0x01, 0x80, 0x74, 0x09, 0xBA, 0x03, 0x00, 0x8B, 0x7F, 0x21, 0xE8, 0x61, 0xFD, 0xE4, 0x61, 0x24, 0xFC,
        0x0A, 0xC2, 0xE6, 0x61, 0x5D, 0x5F, 0x5E, 0x1F, 0x07, 0x5A, 0x58, 0xC3, 0xC3, 0x8C, 0xC8, 0x8B, 0xD0, 0xB8, 0xFE,
        0x03, 0xC3, 0x8B, 0xEE, 0xBE, 0xFF, 0xFF, 0x0B, 0xED, 0x75, 0x03, 0xBD, 0x01, 0x00, 0xBB, 0x52, 0x01, 0xBF, 0x01,
        0x00, 0x85, 0xEF, 0x74, 0x08, 0x8B, 0x47, 0x06, 0x0B, 0x47, 0x08, 0x75, 0x03, 0xE9, 0xC1, 0x00, 0xF7, 0xC2, 0x00,
        0x01, 0x74, 0x1F, 0x0B, 0xC9, 0x74, 0x09, 0x2E, 0xC6, 0x06, 0x00, 0x04, 0x00, 0xEB, 0x0A, 0x90, 0x2E, 0xC6, 0x06,
        0x00, 0x04, 0x01, 0xE8, 0x00, 0xFD, 0xF7, 0xC2, 0x00, 0x04, 0x74, 0x03, 0x89, 0x4F, 0x13, 0xF7, 0xC2, 0x40, 0x00,
        0x74, 0x13, 0xF7, 0x47, 0x04, 0x40, 0x00, 0x75, 0x0C, 0x83, 0x4F, 0x04, 0x40, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C,
        0x4F, 0x27, 0xF7, 0xC2, 0x80, 0x00, 0x74, 0x11, 0xC6, 0x47, 0x1D, 0x0F, 0xC6, 0x47, 0x1A, 0x0F, 0xC6, 0x47, 0x1E,
        0x00, 0xC7, 0x47, 0x04, 0x02, 0x00, 0xF7, 0xC2, 0x20, 0x00, 0x74, 0x04, 0x83, 0x4F, 0x04, 0x20, 0xF7, 0xC2, 0x00,
        0x20, 0x74, 0x17, 0xF7, 0xC2, 0x10, 0x00, 0x75, 0x11, 0x51, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0x83, 0xE1, 0x0F,
        0x88, 0x4F, 0x1D, 0x88, 0x4F, 0x1A, 0x59, 0xF7, 0xC2, 0x00, 0x80, 0x74, 0x0E, 0x51, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0,
        0xE9, 0x83, 0xE1, 0x0F, 0x88, 0x4F, 0x1A, 0x59, 0xF7, 0xC2, 0x00, 0x10, 0x74, 0x06, 0x88, 0x4F, 0x1B, 0x88, 0x4F,
        0x1C, 0xF7, 0xC2, 0x10, 0x00, 0x74, 0x1F, 0xF7, 0xC2, 0x00, 0x20, 0x75, 0x12, 0xF7, 0x47, 0x04, 0x40, 0x00, 0x75,
        0x12, 0x3B, 0x77, 0x18, 0x7F, 0x0D, 0x8B, 0x77, 0x18, 0xEB, 0x08, 0x90, 0x38, 0x4F, 0x1D, 0x74, 0x02, 0x33, 0xF6,
        0xD1, 0xE7, 0x83, 0xC3, 0x29, 0x81, 0xFB, 0x7B, 0x01, 0x72, 0x0C, 0x8B, 0xC6, 0xF7, 0xC2, 0x00, 0x02, 0x74, 0x03,
        0xE8, 0x00, 0xFF, 0xC3, 0xE9, 0x16, 0xFF, 0x8B, 0xEE, 0xBE, 0xFF, 0xFF, 0x0B, 0xED, 0x75, 0x03, 0xBD, 0x01, 0x00,
        0xBB, 0x29, 0x01, 0xBF, 0x01, 0x00, 0x85, 0xEF, 0x75, 0x03, 0xE9, 0xC7, 0x00, 0xF7, 0xC2, 0x00, 0x04, 0x74, 0x03,
        0x89, 0x4F, 0x13, 0xF7, 0xC2, 0x40, 0x00, 0x74, 0x0C, 0x83, 0x4F, 0x04, 0x40, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C,
        0x4F, 0x27, 0xF7, 0xC2, 0x80, 0x00, 0x74, 0x46, 0xF7, 0xC2, 0x00, 0x40, 0x74, 0x07, 0xF7, 0x47, 0x04, 0x40, 0x00,
        0x74, 0x39, 0x56, 0x51, 0x2E, 0xC4, 0x36, 0x14, 0x04, 0x8B, 0xC1, 0x8B, 0xCE, 0x8D, 0x74, 0x12, 0xD1, 0xE0, 0xD1,
        0xE0, 0x03, 0xF0, 0x26, 0x8B, 0x04, 0x03, 0xC1, 0x89, 0x47, 0x06, 0x8C, 0x47, 0x08, 0xC7, 0x47, 0x04, 0x02, 0x80,
        0xC6, 0x47, 0x1D, 0x0F, 0xC6, 0x47, 0x1A, 0x0F, 0xC6, 0x47, 0x1E, 0x00, 0x8B, 0x77, 0x02, 0x83, 0x4C, 0x04, 0x04,
        0x59, 0x5E, 0xF7, 0xC2, 0x20, 0x00, 0x74, 0x04, 0x83, 0x4F, 0x04, 0x20, 0xF7, 0xC2, 0x00, 0x20, 0x74, 0x17, 0xF7,
        0xC2, 0x10, 0x00, 0x75, 0x11, 0x51, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0x83, 0xE1, 0x0F, 0x88, 0x4F, 0x1D, 0x88,
        0x4F, 0x1A, 0x59, 0xF7, 0xC2, 0x00, 0x80, 0x74, 0x0E, 0x51, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0x83, 0xE1, 0x0F,
        0x88, 0x4F, 0x1A, 0x59, 0xF7, 0xC2, 0x10, 0x00, 0x74, 0x1F, 0xF7, 0xC2, 0x00, 0x20, 0x75, 0x12, 0xF7, 0x47, 0x04,
        0x40, 0x00, 0x75, 0x12, 0x3B, 0x77, 0x18, 0x7F, 0x0D, 0x8B, 0x77, 0x18, 0xEB, 0x08, 0x90, 0x38, 0x4F, 0x1D, 0x74,
        0x02, 0x33, 0xF6, 0xD1, 0xE7, 0x83, 0xC3, 0x29, 0x81, 0xFB, 0x52, 0x01, 0x72, 0x03, 0x8B, 0xC6, 0xC3, 0xE9, 0x21,
        0xFF, 0x8E, 0xC2, 0x33, 0xC9, 0xBD, 0x01, 0x00, 0xBB, 0x52, 0x01, 0x8B, 0xFE, 0x8B, 0xD1, 0xD1, 0xE2, 0xD1, 0xE2,
        0x03, 0xFA, 0x26, 0x8B, 0x45, 0x08, 0x26, 0x8B, 0x55, 0x0A, 0x0B, 0xD0, 0x75, 0x15, 0xD1, 0xE5, 0x83, 0xC7, 0x04,
        0x41, 0x83, 0xF9, 0x0B, 0x75, 0xE9, 0x33, 0xC0, 0x89, 0x47, 0x06, 0x89, 0x47, 0x08, 0xEB, 0x11, 0x2E, 0x85, 0x2E,
        0x02, 0x04, 0x74, 0xE4, 0x8B, 0xFE, 0x03, 0xF8, 0x89, 0x7F, 0x06, 0x8C, 0x47, 0x08, 0x83, 0x4F, 0x04, 0x40, 0xC7,
        0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x41, 0x83, 0xC3, 0x29, 0x83, 0xF9, 0x01, 0x72, 0xAF, 0x26, 0x8B, 0x44,
        0x04, 0x26, 0x8B, 0x54, 0x06, 0x0B, 0xD0, 0x74, 0x26, 0x8B, 0xFE, 0x03, 0xF8, 0x26, 0x80, 0x7D, 0x04, 0x42, 0x74,
        0x09, 0x26, 0x8B, 0x05, 0x26, 0x8B, 0x55, 0x02, 0xEB, 0xE8, 0x83, 0xC7, 0x04, 0x2E, 0x89, 0x3E, 0x0C, 0x04, 0x2E,
        0x8C, 0x06, 0x0E, 0x04, 0x2E, 0x8C, 0x06, 0x1A, 0x04, 0xC3, 0x8E, 0xC2, 0x8B, 0xFE, 0x8B, 0xF7, 0x2E, 0x89, 0x3E,
        0x14, 0x04, 0x2E, 0x8C, 0x06, 0x16, 0x04, 0x26, 0x8B, 0x44, 0x04, 0x26, 0x8B, 0x54, 0x06, 0x0B, 0xD0, 0x74, 0x17,
        0x8B, 0xFE, 0x03, 0xF8, 0x26, 0x80, 0x7D, 0x04, 0x42, 0x74, 0x09, 0x26, 0x8B, 0x05, 0x26, 0x8B, 0x55, 0x02, 0xEB,
        0xE8, 0x83, 0xC7, 0x04, 0x2E, 0x89, 0x3E, 0x10, 0x04, 0x2E, 0x8C, 0x06, 0x12, 0x04, 0xBB, 0x29, 0x01, 0x83, 0x4F,
        0x04, 0x40, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x83, 0xC3, 0x29, 0x81, 0xFB, 0x52, 0x01, 0x72, 0xEB,
        0xC3, 0xB8, 0x4D, 0x42, 0xBA, 0x01, 0x00, 0xC3, 0x33, 0xC0, 0x8E, 0xC0, 0xBE, 0xC0, 0x03, 0x2E, 0xA1, 0x08, 0x04,
        0x26, 0x89, 0x04, 0x2E, 0xA1, 0x0A, 0x04, 0x26, 0x89, 0x44, 0x02, 0x2E, 0x8E, 0x06, 0x2C, 0x00, 0xB4, 0x49, 0xCD,
        0x21, 0x8C, 0xC8, 0x8E, 0xC0, 0xB4, 0x49, 0xCD, 0x21, 0xC3, 0xBB, 0x52, 0x01, 0x33, 0xC9, 0x83, 0x4F, 0x04, 0x40,
        0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x8B, 0x77, 0x02, 0x83, 0x4C, 0x04, 0x40, 0xC7, 0x44, 0x25, 0x19,
        0x01, 0x8C, 0x4C, 0x27, 0x83, 0xC3, 0x29, 0x41, 0x83, 0xF9, 0x01, 0x75, 0xDC, 0xE8, 0x11, 0xFA, 0xC3, 0xBB, 0x52,
        0x01, 0x88, 0x57, 0x17, 0x32, 0xED, 0x89, 0x4F, 0x15, 0x8A, 0x2F, 0x33, 0xED, 0x8B, 0x57, 0x04, 0x33, 0xD2, 0xE8,
        0x9B, 0xF9, 0x89, 0x47, 0x23, 0x8B, 0x47, 0x04, 0x25, 0xFF, 0xBF, 0x0B, 0xC1, 0x89, 0x47, 0x04, 0xA9, 0x00, 0x40,
        0x74, 0x0D, 0x8B, 0x77, 0x21, 0x83, 0x0C, 0x02, 0x8B, 0x77, 0x1F, 0x83, 0x4C, 0x02, 0x02, 0xC3, 0xC3, 0xBB, 0x52,
        0x01, 0x0A, 0xC0, 0x75, 0x1E, 0x8B, 0xC2, 0x0B, 0xC6, 0x75, 0x05, 0x8C, 0xCA, 0xBE, 0x19, 0x01, 0x89, 0x57, 0x27,
        0x89, 0x77, 0x25, 0x88, 0x6F, 0x12, 0x8B, 0x77, 0x1F, 0x83, 0x4C, 0x02, 0x01, 0xC4, 0x77, 0x25, 0xC3, 0xA2, 0x06,
        0x3E, 0x0A, 0x7B, 0x04, 0x2B, 0x09, 0xB9, 0x09, 0x3E, 0x07, 0x3A, 0x08, 0x16, 0x0A, 0x0F, 0x0A, 0x36, 0x07, 0x35,
        0x07, 0x6B, 0x0A, 0xA4, 0x0A, 0xA3, 0x0A, 0xEB, 0x0E, 0x49, 0x46, 0x47, 0x4D, 0x20, 0x42, 0x55, 0x5A, 0x45, 0x52,
        0x20, 0x50, 0x43, 0x00, 0x1E, 0x06, 0x56, 0x57, 0x53, 0x51, 0x55, 0xFC, 0x8C, 0xCB, 0x8E, 0xDB, 0x33, 0xDB, 0x8A,
        0xDC, 0x2E, 0xFF, 0x97, 0xCA, 0x0A, 0x5D, 0x59, 0x5B, 0x5F, 0x5E, 0x07, 0x1F, 0xCF, 0xBC, 0x00, 0x01, 0xBA, 0x87,
        0x0B, 0xD1, 0xEA, 0xD1, 0xEA, 0xD1, 0xEA, 0xD1, 0xEA, 0x42, 0xB4, 0x4A, 0xCD, 0x21, 0x33, 0xC0, 0x8E, 0xC0, 0xBE,
        0xC0, 0x03, 0x26, 0x8B, 0x3C, 0x2E, 0x89, 0x3E, 0x08, 0x04, 0x26, 0x8E, 0x5C, 0x02, 0x2E, 0x8C, 0x1E, 0x0A, 0x04,
        0x8B, 0xC7, 0x8C, 0xDA, 0x0B, 0xD0, 0x74, 0x19, 0x8B, 0x4D, 0x02, 0x8B, 0x55, 0x04, 0x81, 0xF9, 0x49, 0x46, 0x75,
        0x0D, 0x81, 0xFA, 0x47, 0x4D, 0x75, 0x07, 0xB0, 0xFF, 0xB4, 0x4C, 0xCD, 0x21, 0xC3, 0x2E, 0xC7, 0x06, 0x04, 0x04,
        0x52, 0x01, 0x2E, 0x8C, 0x0E, 0x06, 0x04, 0xB8, 0xE6, 0x0A, 0x26, 0x89, 0x04, 0x26, 0x8C, 0x4C, 0x02, 0x32, 0xC0,
        0xBA, 0x13, 0x0B, 0xD1, 0xEA, 0xD1, 0xEA, 0xD1, 0xEA, 0xD1, 0xEA, 0x42, 0xB4, 0x31, 0xCD, 0x21 };

    const std::vector<uint8_t> uncompressed_reference(uncompressed_example,
        uncompressed_example + sizeof(uncompressed_example));

    const std::vector<uint8_t> compressed(compressed_example, compressed_example + sizeof(compressed_example));

    std::vector<uint8_t> uncompressed = uncompress(compressed, uncompressed_reference.size());

    return uncompressed == uncompressed_reference;
}

std::string hexdump(const void* const buffer, int buffer_size, int width)
{
    assert(width > 0);

    /*
AAAAAAAA 00 11 22 33 44 55 66 77 abcdefgh\n
    8+1        width*(2+1)       width   + 1
    */

    constexpr int address_size = 8 + 1;
    const int hex_size = width * (2 + 1);
    const int ascii_size = width + 1;

    const int full_lines = buffer_size / width;
    const int rest = buffer_size % width;
    const int all_lines = (rest == 0) ? full_lines : full_lines + 1;
    const int result_size = all_lines * (address_size + hex_size + ascii_size);
    std::string result(result_size, ' ');
    char* current_out = result.data();
    const uint8_t* begin_in = static_cast<const uint8_t*>(buffer);
    const uint8_t* current_in = begin_in;

    auto line = [&result,
        address_size,
        hex_size,
        ascii_size](char*& current_out_,
            const uint8_t* const begin_in_,
            const uint8_t*& current_in_,
            int count_)
    {
        auto hex2 = [](char* const current_out_, uint8_t value_) {
            constexpr char hex[] = "0123456789ABCDEF";
            current_out_[0] = hex[value_ >> 4];
            current_out_[1] = hex[value_ & 0xF];
        };

        auto hex8 = [&](char* const current_out_, int value_) {
            hex2(&current_out_[0], static_cast<uint8_t>(value_ >> 24));
            hex2(&current_out_[2], static_cast<uint8_t>(value_ >> 16));
            hex2(&current_out_[4], static_cast<uint8_t>(value_ >> 8));
            hex2(&current_out_[6], static_cast<uint8_t>(value_ >> 0));
        };

#if 0
        {
            {
                std::string a(8, ' ');
                hex8(a.data(), 0xAABBCCDD);
                assert(a == "AABBCCDD");
            }
            {
                std::string a(8, ' ');
                hex8(a.data(), 0xDDCCBBAA);
                assert(a == "DDCCBBAA");
            }
            {
                std::string a(8, ' ');
                hex8(a.data(), 0x01234567);
                assert(a == "01234567");
            }
        }
#endif

        int address = current_in_ - begin_in_;
        hex8(current_out_, address);
        current_out_ += address_size;

        for (int b = 0; b < count_; ++b) {
            const uint8_t value = current_in_[b];
            hex2(current_out_ + b * (2 + 1), value);
            const char c = (value >= 32 && value <= 126) ? static_cast<char>(value) : '.';
            current_out_[hex_size + b] = c;
        }

        current_out_ += hex_size + count_ + 1;
        current_in_ += count_;
    };

    // full lines
    for (int f = 0; f < full_lines; ++f) {
        line(current_out, begin_in, current_in, width);
        current_out[-1] = '\n';
    }

    // rest
    if (rest) {
        line(current_out, begin_in, current_in, rest);
        current_out[-1] = '\n';
    }

    return result;
}

std::vector<std::string> ls_recursive(const std::filesystem::path& path)
{
    std::vector<std::string> result;
    for (const auto& p : std::filesystem::recursive_directory_iterator(path))
    {
        if (!std::filesystem::is_directory(p))
        {
            result.push_back(p.path().string());
        }
    }
    return result;
    }
