#include "cc_algorithm.hpp"

#include "helper.hpp"

#include <cassert>
#include <optional>

constexpr uint8_t LAST_BLOCK = 0;
constexpr uint8_t NOT_LAST_BLOCK = 1;

struct block_t {
    uint8_t packed_size{};
    uint8_t flag{}; // 0 = last block, 1 = more blocks comming
    uint16_t data_len{}; // (un)compressed data
};

struct tables_t {
    std::vector<uint8_t> table0;
    std::vector<uint8_t> table1;
    std::vector<uint8_t> table3;
    std::vector<uint8_t> table4;
};

constexpr uint8_t UNPACKED_VAL = 0;

static void uncompress_part1(
    stream_writer_t& output_writer_,
    const tables_t& tables,
    const uint8_t index_,
    const std::vector<uint8_t>& table_);

static void uncompress_part0(stream_writer_t& output_writer_, const tables_t& tables, const uint8_t index_)
{
    //index_ is value from table3 or table4
    uncompress_part1(output_writer_, tables, index_, tables.table0);
    uncompress_part1(output_writer_, tables, index_, tables.table1);
}

static void uncompress_part1(
    stream_writer_t& output_writer_,
    const tables_t& tables,
    const uint8_t index_,
    const std::vector<uint8_t>& table_
)
{
    // table_ is table0 or table1, index_ is value from table3 or table4
    const uint8_t table3_index = table_[index_];
    const uint8_t table3_val = tables.table3[table3_index];

    if (table3_val == UNPACKED_VAL)
    {
        output_writer_.write_uint8(table3_index);
        return;
    }

    if (index_ > table3_val)
    {
        uncompress_part0(output_writer_, tables, table3_val);
        return;
    }

    uint8_t table4_index = table3_val;
    while (true)
    {
        const uint8_t table4_val = tables.table4[table4_index];

        if (table4_val == UNPACKED_VAL)
        {
            output_writer_.write_uint8(table3_index);
            return;
        }

        if (index_ >= table4_val)
        {
            uncompress_part0(output_writer_, tables, table4_val);
            return;
        }

        table4_index = table4_val;
    }
}

struct table_3_4_t
{
    std::vector<uint8_t> table3;
    std::vector<uint8_t> table4;
};

static table_3_4_t generate_table_3_4_from_table2(const std::vector<uint8_t>& table2_)
{
    std::vector<uint8_t> table3(256);
    std::vector<uint8_t> table4(1 + table2_.size());

    for (size_t i = 0; i < table2_.size(); ++i) {
        const uint8_t ofs = table2_[i];
        //table3 offsets are initial all 0 but filled offsets get then re-used
        const uint8_t index = i + 1; // (0..255)+1
        table4[index] = table3[ofs]; //1+256  [0] ignored, [1-256]
        table3[ofs] = index;
    }
    table4[0] = 0xFF; // unused, never read

    return { table3 , table4 };
}

static std::vector<uint8_t> generate_table2_from_table_3_4(const table_3_4_t& tables_)
{
    assert(tables_.table3.size() == 256);

    auto find_index_by_value = [](const std::vector<uint8_t> list_, uint8_t value_)
    {
        std::vector<uint8_t> tmp;
        for (size_t i = 0; i < list_.size(); ++i)
        {
            if (list_[i] == value_)
            {
                tmp.push_back(i);
            }
        }
        // should be only 0 or 1 - if im correct
        const bool ok = (tmp.size() == 0) || (tmp.size() == 1);
        if (!ok)
        {
            throw 231;
        }
        std::optional<uint8_t> res;
        if (tmp.size() == 1)
        {
            res = tmp[0];
        }
        return res;
    };

    struct table2_result_t
    {
        std::vector<int> indices;
        uint8_t value;
    };

    auto traverse_chain = [&](int tabl4_index_)
    {
        table2_result_t res;

        int current_table4_index = tabl4_index_;
        while (true)
        {
            //printf("%i", current_table4_index - 1);
            res.indices.push_back(current_table4_index - 1);

            std::optional<uint8_t> t3_indice = find_index_by_value(tables_.table3, current_table4_index);
            // could be foundable
            if (t3_indice.has_value())
            {
                // chain end found
                //printf(" t2-ofs: %i\n", t3_indices[0]);
                res.value = t3_indice.value();
                break;
            }

            //printf(",");

            std::optional<uint8_t> t4_indice = find_index_by_value(tables_.table4, current_table4_index);
            // needs to get found
            assert(t4_indice.has_value());
            current_table4_index = t4_indice.value();
        }

        return res;
    };

    std::vector<uint8_t> table2(tables_.table4.size() - 1);
    for (size_t i = 1; i < tables_.table4.size(); ++i)
    {
        table2_result_t t2r = traverse_chain(i);
        for (auto i : t2r.indices)
        {
            table2[i] = t2r.value;
        }
    }

    return table2;
}

struct tables_2_0_1_t
{
    std::vector<uint8_t> table2;
    std::vector<uint8_t> table0;
    std::vector<uint8_t> table1;
};

static tables_2_0_1_t read_tables_2_0_1(stream_reader_t& input_reader_, const uint8_t packed_size)
{
    const std::vector<uint8_t> table2 = input_reader_.read_vector(packed_size); // only needed for initialization, not for later uncompression

    std::vector<uint8_t> table0(1 + packed_size);
    input_reader_.read(&table0[1], packed_size);
    table0[0] = 0xFF; // unused, never read

    std::vector<uint8_t> table1(1 + packed_size);
    input_reader_.read(&table1[1], packed_size);
    table1[0] = 0xFF; // unused, never read

    return { table2, table0, table1 };
}

static tables_t read_and_prepare_tables(stream_reader_t& input_reader_, const uint8_t packed_size)
{
    if (packed_size == 0)
    {
        throw 32;
    }

    /*
    in file:
        table2         packed_size
        table0         1+packed_size bytes
        table1         1+packed_siize bytes

    table3/table4 generated from table2
    */

    // read & prepare uncompress-helper tables
    const tables_2_0_1_t table_2_0_1 = read_tables_2_0_1(input_reader_, packed_size);

    // QUESTION:
    // its currently, unclear what the max-packed_size could be
    // packed_size is uint8_t so max would be technical 255

    // prepare table3 and table4 based on the read tables

    const table_3_4_t table_3_4 = generate_table_3_4_from_table2(table_2_0_1.table2);

#if !defined(NDEBUG)
    {
        const std::vector<uint8_t> table2 = generate_table2_from_table_3_4(table_3_4);
        assert(table2 == table_2_0_1.table2);
    }
#endif

    return { table_2_0_1.table0, table_2_0_1.table1, table_3_4.table3, table_3_4.table4 };
}

static block_t read_block(stream_reader_t& input_reader_)
{
    block_t block{};

    if (input_reader_.left() < sizeof(uint8_t) + sizeof(uint8_t) + sizeof(uint16_t))
    {
        throw 4;
    }

    block.packed_size = input_reader_.read_uint8();
    block.flag = input_reader_.read_uint8();
    block.data_len = input_reader_.read_uint16();

    bool known_flag = block.flag == LAST_BLOCK || block.flag == NOT_LAST_BLOCK;
    if (!known_flag)
    {
        throw 25;
    }

    return block;
}

std::vector<uint8_t> uncompress(const std::vector<uint8_t>& packed_data_, const size_t unpacked_size_)
{
    stream_reader_t input_reader(packed_data_.data(), packed_data_.data() + packed_data_.size());

    std::vector<uint8_t> output(unpacked_size_);
    stream_writer_t output_writer(output.data(), output.data() + output.size());

    while (true)
    {
        const block_t block = read_block(input_reader);

        if (block.packed_size == 0) { // is not packed?
            const std::vector<uint8_t> uncompressed_data = input_reader.read_vector(block.data_len);

            output_writer.write_vector(uncompressed_data);
        }
        else {
            const tables_t tables = read_and_prepare_tables(input_reader, block.packed_size);

            const std::vector<uint8_t> compressed_data = input_reader.read_vector(block.data_len);

            for (const uint8_t var1 : compressed_data)
            {
                const uint8_t table3_val = tables.table3[var1]; // var1 0..n

                if (table3_val == UNPACKED_VAL) {    // uncompressed part
                    output_writer.write_uint8(var1); // just store value
                }
                else {                      // compressed part
                    uncompress_part0(output_writer, tables, table3_val);
                }
            }
        }

        if (block.flag == LAST_BLOCK)
        {
            break;
        }
    }

    if (input_reader.left() != 0)
    {
        throw 9;
    }
    if (output_writer.left() != 0)
    {
        throw 29;
    }

    return output;
}

//====================================================================

// unit test

bool part_uncompress_unit_test()
{
    const std::vector<uint8_t> output_ref{ 0xFF, 0x36, 0x5C, 0x8B, 0xFF, 0x36, 0x5A, 0x8B, 0xE8 };

    // tables from file

    constexpr size_t SIZE = 95;

    tables_t tables;
    tables.table0 = {
        0xFF, 0x50, 0xC4, 0x83, 0xFF, 0x44, 0xC7, 0xFF, 0x83, 0x00, 0x33, 0x8B, 0x83, 0xF8, 0x17, 0x53,
        0x36, 0x15, 0x01, 0x5B, 0x60, 0x8B, 0x4A, 0x62, 0xFF, 0x00, 0x5C, 0x5A, 0x15, 0x26, 0xC7, 0x17,
        0x8D, 0x60, 0x44, 0x42, 0x66, 0x7A, 0x85, 0x7A, 0x85, 0x61, 0x35, 0x89, 0x00, 0x01, 0x4A, 0x50,
        0x58, 0x5D, 0x00, 0x94, 0x6B, 0x15, 0xAB, 0xAE, 0xAB, 0x17, 0x3E, 0x55, 0xAF, 0x55, 0xAF, 0x83,
        0x33, 0x03, 0x00, 0x1D, 0x2E, 0x23, 0xCB, 0xCC, 0xCB, 0x89, 0x23, 0xCE, 0xD0, 0x1C, 0xDE, 0xA9,
        0xAB, 0xD1, 0xFF, 0x2A, 0xDF, 0x35, 0x35, 0xE4, 0xEA, 0x62, 0x36, 0x36, 0x1E, 0x26, 0xA6, 0x24 };
    assert(tables.table0.size() == SIZE + 1);
    tables.table1 = {
        0xFF, 0xE8, 0x5E, 0x46, 0x36, 0x44, 0x06, 0x76, 0xC4, 0x00, 0xC0, 0xE5, 0x3E, 0x26, 0xF8, 0x02,
        0x06, 0x51, 0x00, 0x89, 0x07, 0x46, 0x52, 0x50, 0x46, 0x10, 0x8B, 0x8B, 0xF4, 0xFF, 0x46, 0xF4,
        0x2A, 0x04, 0x88, 0x88, 0x69, 0x02, 0x67, 0x37, 0xE8, 0x57, 0x04, 0x46, 0x52, 0x39, 0x10, 0x8B,
        0x78, 0xC3, 0x74, 0x10, 0x7A, 0x04, 0x26, 0x8B, 0x07, 0x04, 0x01, 0x8B, 0xEC, 0x83, 0xEC, 0x7E,
        0x58, 0xE9, 0xA3, 0x33, 0x5C, 0x65, 0x23, 0x5C, 0xE8, 0x16, 0x6F, 0x23, 0x73, 0x53, 0x00, 0x37,
        0x02, 0xE0, 0xFF, 0x89, 0x56, 0xFA, 0xFE, 0x35, 0xFC, 0xF6, 0x08, 0x04, 0xB8, 0x88, 0x01, 0x7E };
    assert(tables.table1.size() == SIZE + 1);

    // tables.table0/1[0] is unused

    const std::vector<uint8_t> table2{
        0x10, 0x15, 0x17, 0x23, 0x2A, 0x2E, 0x35, 0x36, 0x39, 0x4A, 0x33, 0x4C,
        0x51, 0x53, 0x57, 0x53, 0x5B, 0x5F, 0x60, 0x61, 0x60, 0x62, 0x52, 0x62,
        0x63, 0x65, 0x5C, 0x66, 0x67, 0x68, 0x69, 0x6B, 0x6D, 0x6F, 0x73, 0x7A,
        0x85, 0x7A, 0x85, 0x37, 0x7A, 0x85, 0x93, 0x94, 0x96, 0x9E, 0x9F, 0xA5,
        0x58, 0x5D, 0xA7, 0xA9, 0xAB, 0xAE, 0xAB, 0xAE, 0xAB, 0x17, 0xAF, 0x55,
        0xAF, 0x55, 0xAF, 0xB9, 0xBC, 0xBD, 0xBE, 0xC9, 0xCB, 0xCC, 0xCB, 0xCC,
        0xCB, 0xCE, 0xD0, 0xCE, 0xD0, 0xD2, 0xD6, 0xD7, 0xD8, 0xDE, 0xDF, 0xE1,
        0xDF, 0xE4, 0xEA, 0xE4, 0xEA, 0xED, 0xEF, 0x36, 0xF1, 0xF2, 0xF3
    };
    assert(table2.size() == SIZE);

    assert(tables.table0.size() + tables.table1.size() + table2.size() == SIZE + 1 + SIZE + 1 + SIZE);
    // very strange: 3*SIZE+2 = 287 bytes for "packing" 9 bytes? das ist nur ein "slice" aus den komprimierten daten

    //-------------------

    // compressed data from file

    const std::vector<uint8_t> compressed_data = {
        0x32, 0x02, 0x68, 0xFC, 0x39, 0xE9, 0x83, 0x00, 0xAE, 0xB1, 0x04, 0xD3,
        0xE0, 0x26, 0x03, 0x47, 0x02, 0x7A, 0xAB, 0x04, 0x8B, 0x5E, 0x51, 0xC7,
        0x07, 0x39, 0x57, 0xAE, 0x61, 0xD7, 0x57, 0xAE, 0x61, 0xD7, 0x57, 0xAE,
        0x61, 0xD7, 0x57, 0x68, 0xFE, 0x39, 0xEB, 0x0F, 0x5B, 0xC7, 0x07, 0x39,
        0x57, 0x62, 0xFE, 0xAF, 0xFE, 0x0B, 0x7C, 0xEB, 0x62, 0xFC, 0x60, 0xFC,
        0x3B, 0x06, 0x17, 0x7D, 0xBC, 0x71, 0xFF, 0x2E, 0x40, 0x96, 0x2E, 0xA2,
        0x96, 0xB9, 0x55, 0x06, 0x4C, 0x5A, 0x78, 0x5D, 0x6A, 0x6D, 0x25, 0x00,
        0x07, 0xBB, 0x20, 0x00, 0x99, 0xF7, 0xFB, 0x93, 0xFA, 0x6D, 0x25, 0x70,
        0x00, 0xBB, 0x02, 0x00, 0x99, 0xF7, 0xFB, 0x93, 0xFC, 0x6D, 0x25, 0x07,
        0x00, 0xD8, 0xD8, 0xD8, 0x93, 0xFE, 0xE8, 0x59, 0xBA, 0xE4, 0xDF, 0x9E,
        0x21, 0x8D, 0xED, 0xE4, 0xDF, 0xB8, 0x07, 0x63, 0x0E, 0x8D, 0xED, 0xE4,
        0xDF, 0xB8, 0x0F, 0x63, 0xFB, 0x8C, 0xED, 0xEB, 0x31, 0xE8, 0x1C, 0xBA,
        0x85, 0x9E, 0x9A, 0xB8, 0xEF, 0x85, 0xB8, 0x07, 0x63, 0x8D, 0xB8, 0xEF,
        0x85, 0xB8, 0x0F, 0x63, 0x80, 0xB8, 0xEF, 0x85, 0xE8, 0x8F, 0x8C, 0x2A,
        0x2E, 0x3A, 0x96, 0xB9, 0x4C, 0x3A, 0x5F, 0x75, 0x09, 0xE8, 0xCF, 0xF8,
        0x2E, 0x3A, 0x01, 0xDE, 0x4C, 0x3A, 0x5F, 0x7E, 0x09, 0x23, 0x3A, 0x01,
        0xE8, 0x30, 0xFF, 0x2A, 0xC3, 0x55, 0x0A, 0x68, 0xF6, 0x39, 0x23, 0xC4,
        0x01, 0xE8, 0x4F, 0xB3, 0x2A, 0x6D, 0x0B, 0xC0, 0x74, 0x07, 0x3D, 0x5F,
        0x74, 0x20, 0xEB, 0x3D, 0xB0, 0x3E, 0x10, 0x18, 0xC2, 0xE1, 0xFA, 0x93,
        0xF8, 0xB0, 0x3F, 0x10, 0x0A, 0xC2, 0xE1, 0xFE, 0x93, 0xFC, 0xEB, 0x1F,
        0xB0, 0x3E, 0x10, 0xFA, 0xC1, 0xE1, 0xFA, 0x93, 0xF8, 0xA0, 0xC4, 0x01,
        0x04, 0x3B, 0x10, 0xE9, 0xC1, 0xE1, 0xFE, 0x93, 0xFC, 0xE8, 0xE5, 0x97,
        0xBA, 0x80, 0x94, 0xB8, 0x0D, 0x63, 0x19, 0x18, 0x53, 0x9E, 0xAC, 0x91,
        0x2A, 0x4A, 0xA3, 0xA4, 0x88, 0xA3, 0xF1, 0xA3, 0xA8, 0x01, 0xA3, 0xF2,
        0xEB, 0x50, 0x2E, 0x06, 0x01, 0x80, 0x00, 0x83, 0x06, 0xF2, 0x01, 0x83,
        0x16, 0xA8, 0x5F, 0xE8, 0x45, 0xB7, 0xE8, 0x9B, 0x9A, 0xE8, 0x8A, 0x87,
        0xE8, 0x21, 0x88, 0xE8, 0xE6, 0x92, 0xE8, 0x48, 0xB5, 0xDF, 0x35, 0xF8,
        0x35, 0xF6, 0xE8, 0xDB, 0xB2, 0x53, 0xE4, 0xB8, 0xB8, 0x00, 0x2B, 0x46,
        0xF6, 0x10, 0xC8, 0xB2, 0x53, 0xAF, 0xF6, 0x6E, 0x7D, 0x03, 0xEA, 0xE8,
        0x98, 0xB8, 0x80, 0x3E, 0x1A, 0x82, 0x01, 0x74, 0x11, 0x4C, 0xA8, 0x5F,
        0x7C, 0xA2, 0x75, 0x08, 0x81, 0x3E, 0xF2, 0x2C, 0x01, 0x72, 0x98, 0x2E,
        0x06, 0x96, 0x2E, 0x12, 0x01, 0xFE, 0xFF, 0xB9, 0xB8, 0x5F, 0xA3, 0xC4,
        0x01, 0x10, 0x4B, 0xB3, 0x2A, 0x4C, 0xA6, 0x88, 0x5D, 0xBC, 0xFE, 0x01,
        0xE8, 0xC4, 0x82, 0x23, 0x1A, 0x8D, 0xE8, 0x02, 0x91, 0x2A, 0x2E, 0x9F,
        0x39, 0x36, 0xD1, 0x00, 0x50, 0x36, 0xC8, 0x63, 0x00, 0x8E, 0xED, 0x36,
        0xF3, 0x10, 0x8E, 0x83, 0xEF, 0xB8, 0x5F, 0x10, 0x14, 0xF9, 0x2A, 0xE9,
        0xC5, 0x01, 0x4C, 0xA6, 0x88, 0x00, 0x75, 0x34, 0xE8, 0xCA, 0xB6, 0xE8,
        0x14, 0xB8, 0x23, 0x9F, 0xE8, 0x8A, 0xFB, 0x2A, 0x23, 0x9F, 0xE8, 0xC7,
        0xF6, 0x2A, 0xE8, 0x44, 0xF7, 0xE8, 0xEC, 0x82, 0x2E, 0x12, 0x96, 0x4C,
        0x1E, 0x8D, 0x00, 0x75, 0x09, 0xE8, 0x25, 0x8C, 0x2E, 0x1E, 0x8D, 0x5F,
        0x2E, 0xA6, 0x88, 0x39, 0xE9, 0x2C, 0x01, 0xA0, 0x1A, 0x82, 0xB4, 0xBD,
        0x9A, 0x88, 0x4C, 0x1C, 0x8D, 0x5D, 0x26, 0x36, 0x2C, 0x88, 0x50, 0x9E,
        0x71, 0xA6, 0x53, 0xA0, 0x2D, 0x88, 0x0A, 0x06, 0x1C, 0x82, 0xB4, 0xBD,
        0xF1, 0x03, 0x06, 0x24, 0x82, 0x25, 0x80, 0xBD, 0xA4, 0x88, 0xEB, 0x12,
        0xA0, 0x1C, 0x82, 0xB4, 0xBD, 0xF1, 0x03, 0x06, 0x24, 0x82, 0x25, 0x80,
        0xBD, 0xA4, 0x88, 0x83, 0x06, 0xF2, 0x01, 0x83, 0x16, 0xA8, 0x5F, 0xE8,
        0xF9, 0xB5, 0xE8, 0x4F, 0x99, 0xE8, 0x3E, 0x86, 0xE8, 0xD5, 0x86, 0xE8,
        0x80, 0x90, 0xE8, 0x74, 0x8D, 0xE8, 0xF9, 0xB3, 0xE8, 0x42, 0xFA, 0xE8,
        0x71, 0xB7, 0xE8, 0xDA, 0xFD, 0x4C, 0x9A, 0x88, 0x27, 0x75, 0x03, 0xE8,
        0x9D, 0x8B, 0x4C, 0x9A, 0x88, 0x13, 0x75, 0x43, 0xE8, 0xB8, 0x8B, 0xE8,
        0x4F, 0x8E, 0x8B, 0x1E, 0x9F, 0x8A, 0x87, 0xF3, 0xB4, 0x00, 0x25, 0x0F,
        0x63, 0x34, 0xF8, 0x2A, 0x23, 0x9F, 0xE8, 0x00, 0xF6, 0x2A, 0xE8, 0x7D,
        0xF6, 0x23, 0xAA, 0x88, 0xE8, 0xE3
    };

    //-------------------

    const table_3_4_t table_3_4 = generate_table_3_4_from_table2(table2);
    tables.table3 = table_3_4.table3;
    tables.table4 = table_3_4.table4;

    // single block of the compressed data, the smallest one
    constexpr uint8_t var2 = 0x48;
    std::vector<uint8_t> output(9);
    stream_writer_t output_writer(output.data(), output.data() + output.size());
    uncompress_part0(output_writer, tables, var2);
    return output == output_ref;
}

bool uncompress_unit_test()
{
    const uint8_t compressed_example[] = {
        0x04, 0x01, 0xBA, 0x01, 0x0C, 0x15, 0x19, 0x15, 0x00, 0x0C, 0x15, 0x19, 0x00, 0x0C, 0x15, 0x19, 0xE9, 0x10, 0x0A,
        0x15, 0x15, 0x19, 0x52, 0x01, 0x40, 0x80, 0x15, 0x19, 0x00, 0x0B, 0x01, 0x16, 0x01, 0x19, 0x29, 0x01, 0x40, 0x15,
        0x19, 0x0C, 0x03, 0x01, 0x13, 0x01, 0x19, 0x04, 0x0C, 0x00, 0x08, 0x0C, 0x00, 0xFD, 0x04, 0xFD, 0x04, 0xA9, 0x05,
        0xFD, 0x04, 0x58, 0x05, 0xA7, 0x01, 0xD7, 0x01, 0x07, 0x02, 0x37, 0x02, 0x67, 0x02, 0x97, 0x02, 0xC7, 0x02, 0xF7,
        0x02, 0x27, 0x03, 0x57, 0x03, 0x87, 0x03, 0xB7, 0x03, 0x3A, 0x02, 0x38, 0x02, 0x37, 0x02, 0x35, 0x02, 0x34, 0x02,
        0x33, 0x02, 0x31, 0x02, 0x30, 0x02, 0x2F, 0x02, 0x2D, 0x02, 0x2C, 0x02, 0x2B, 0x02, 0x29, 0x02, 0x28, 0x02, 0x27,
        0x02, 0x25, 0x02, 0x24, 0x02, 0x23, 0x02, 0x21, 0x02, 0x20, 0x02, 0x1F, 0x02, 0x1D, 0x02, 0x1C, 0x02, 0x1B, 0x02,
        0x1A, 0x02, 0x18, 0x02, 0x17, 0x02, 0x16, 0x02, 0x14, 0x02, 0x13, 0x02, 0x12, 0x02, 0x11, 0x02, 0x0F, 0x02, 0x0E,
        0x02, 0x0D, 0x02, 0x0B, 0x02, 0x0A, 0x02, 0x09, 0x02, 0x08, 0x02, 0x06, 0x02, 0x05, 0x02, 0x04, 0x02, 0x03, 0x02,
        0x02, 0x02, 0x00, 0x02, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x01, 0xFB, 0x01, 0xFA, 0x01, 0xF9, 0x01, 0xF8, 0x01, 0xF6,
        0x01, 0xF5, 0x01, 0xF4, 0x01, 0xF3, 0x01, 0xF2, 0x01, 0xF0, 0x01, 0xEF, 0x01, 0xEE, 0x01, 0xED, 0x01, 0xEC, 0x01,
        0xEA, 0x01, 0xE9, 0x01, 0xE8, 0x01, 0xE7, 0x01, 0xE6, 0x01, 0xE4, 0x01, 0xE3, 0x01, 0xE2, 0x01, 0xE1, 0x01, 0xE0,
        0x01, 0xDF, 0x01, 0xDE, 0x01, 0xDC, 0x01, 0xDB, 0x01, 0xDA, 0x01, 0xD9, 0x01, 0xD8, 0x01, 0xD7, 0x01, 0xD6, 0x01,
        0xD4, 0x01, 0xD3, 0x01, 0xD2, 0x01, 0xD1, 0x01, 0xD0, 0x01, 0xCF, 0x01, 0xCE, 0x01, 0xCD, 0x01, 0xCC, 0x01, 0xCA,
        0x01, 0xC9, 0x01, 0xC8, 0x01, 0xC7, 0x01, 0xC6, 0x01, 0xC5, 0x01, 0xC4, 0x01, 0xC3, 0x01, 0xC2, 0x01, 0xC1, 0x01,
        0xC0, 0x01, 0xBE, 0x01, 0xBD, 0x01, 0xBC, 0x01, 0xBB, 0x01, 0xBA, 0x01, 0xB9, 0x01, 0xB8, 0x01, 0xB7, 0x01, 0xB6,
        0x01, 0xB5, 0x01, 0xB4, 0x01, 0xB3, 0x01, 0xB2, 0x01, 0xB1, 0x01, 0xB0, 0x01, 0xAF, 0x01, 0xAE, 0x01, 0xAD, 0x01,
        0xAC, 0x01, 0xAB, 0x01, 0xA9, 0x01, 0xA8, 0x01, 0xA7, 0x01, 0xA6, 0x01, 0xA5, 0x01, 0xA4, 0x01, 0xA3, 0x01, 0xA2,
        0x01, 0xA1, 0x01, 0xA0, 0x01, 0x9F, 0x01, 0x9E, 0x01, 0x9D, 0x01, 0x9C, 0x01, 0x9B, 0x01, 0x9A, 0x01, 0x99, 0x01,
        0x98, 0x01, 0x97, 0x01, 0x96, 0x01, 0x96, 0x01, 0x95, 0x01, 0x94, 0x01, 0x93, 0x01, 0x92, 0x01, 0x91, 0x01, 0x90,
        0x01, 0x8F, 0x01, 0x8E, 0x01, 0x8D, 0x01, 0x8C, 0x01, 0x8B, 0x01, 0x8A, 0x01, 0x89, 0x01, 0x88, 0x01, 0x87, 0x01,
        0x86, 0x01, 0x85, 0x01, 0x84, 0x01, 0x83, 0x01, 0x82, 0x01, 0x81, 0x01, 0x80, 0x01, 0x80, 0x01, 0x7F, 0x01, 0x7E,
        0x01, 0x7D, 0x01, 0x7C, 0x01, 0x7B, 0x01, 0x7A, 0x01, 0x79, 0x01, 0x78, 0x01, 0x77, 0x01, 0x76, 0x01, 0x75, 0x01,
        0x75, 0x01, 0x74, 0x01, 0x73, 0x01, 0x72, 0x01, 0x71, 0x01, 0x70, 0x01, 0x6F, 0x01, 0x6E, 0x01, 0x6D, 0x01, 0x6D,
        0x01, 0x6C, 0x23, 0x01, 0x28, 0x04, 0x16, 0x6C, 0x6D, 0x6E, 0x6F, 0x71, 0x72, 0x76, 0x79, 0x7A, 0x7C, 0x7D, 0x7E,
        0x82, 0x84, 0x86, 0x87, 0x8E, 0x91, 0x92, 0x93, 0x94, 0x96, 0x94, 0x96, 0x97, 0x99, 0x9A, 0x9B, 0x9F, 0xA2, 0xA3,
        0xA2, 0xA4, 0xA5, 0x00, 0xF7, 0x47, 0x26, 0xD0, 0x45, 0x00, 0x00, 0xF7, 0x45, 0x88, 0xF7, 0x16, 0x6E, 0x88, 0x5E,
        0x00, 0x04, 0x80, 0x6C, 0xF7, 0x03, 0x94, 0x96, 0x87, 0x84, 0x8C, 0x8E, 0x52, 0x89, 0x83, 0xA2, 0x6F, 0x40, 0x8B,
        0x00, 0xC2, 0x04, 0x8A, 0xE9, 0x02, 0x74, 0x75, 0x05, 0x04, 0x4F, 0x6D, 0x16, 0x44, 0x45, 0xC3, 0x40, 0x2E, 0x74,
        0x00, 0x71, 0x55, 0x04, 0x86, 0x74, 0x07, 0x47, 0xA3, 0x01, 0x4F, 0x4F, 0x04, 0x6F, 0x76, 0x77, 0x01, 0x6B, 0x01,
        0x6A, 0x01, 0x69, 0x01, 0x68, 0x01, 0x67, 0x01, 0x67, 0x01, 0x66, 0x01, 0x65, 0x01, 0x64, 0x01, 0x63, 0x01, 0x62,
        0x01, 0x61, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5F, 0x01, 0x5E, 0x01, 0x5D, 0x01, 0x5C, 0x01, 0x5B, 0x01, 0x5B, 0x01,
        0x5A, 0x01, 0x59, 0x01, 0x58, 0x01, 0x57, 0x01, 0x56, 0x01, 0x56, 0x01, 0x55, 0x01, 0x54, 0x01, 0x53, 0x01, 0x9B,
        0x9B, 0x51, 0x01, 0x50, 0x01, 0x4F, 0x01, 0x4E, 0x01, 0x4D, 0x01, 0x4D, 0x01, 0x4C, 0x01, 0x4B, 0x01, 0x4A, 0x01,
        0x49, 0x01, 0x49, 0x01, 0x48, 0x01, 0x47, 0x01, 0x46, 0x01, 0x46, 0x01, 0x45, 0x01, 0x44, 0x01, 0x43, 0x01, 0x42,
        0x01, 0x42, 0x01, 0x41, 0x01, 0x40, 0x01, 0x3F, 0x01, 0x3F, 0x01, 0x3E, 0x01, 0x3D, 0x01, 0x3C, 0x01, 0x3B, 0x01,
        0x3B, 0x01, 0x3A, 0x01, 0x39, 0x01, 0x38, 0x01, 0x38, 0x01, 0x37, 0x01, 0x36, 0x01, 0x35, 0x01, 0x35, 0x01, 0x34,
        0x01, 0x33, 0x01, 0x32, 0x01, 0x32, 0x01, 0x31, 0x01, 0x30, 0x01, 0x30, 0x01, 0x2F, 0x01, 0x2E, 0x01, 0x2D, 0x01,
        0x2D, 0x01, 0x2C, 0x01, 0x2B, 0x01, 0x2B, 0x01, 0x2A, 0x01, 0x29, 0x01, 0x28, 0x01, 0x28, 0x01, 0x27, 0x01, 0x26,
        0x01, 0x25, 0x01, 0x25, 0x01, 0x24, 0x01, 0x23, 0x01, 0x23, 0x01, 0x22, 0x01, 0x21, 0x01, 0x21, 0x01, 0x20, 0x01,
        0x1F, 0x01, 0x1F, 0x01, 0x1E, 0x01, 0x1D, 0x01, 0x80, 0xA0, 0xC0, 0x1D, 0x06, 0x78, 0x06, 0x47, 0x06, 0x8D, 0x06,
        0x8C, 0x06, 0x43, 0x06, 0x0C, 0x06, 0x79, 0x79, 0x79, 0x16, 0x00, 0x01, 0x01, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E,
        0x00, 0xCB, 0x57, 0x53, 0x33, 0xC0, 0x8A, 0xC1, 0x24, 0x0F, 0xD1, 0xE0, 0x8B, 0xF8, 0x2E, 0x8B, 0xBD, 0x8F, 0x01,
        0xF7, 0xC5, 0x80, 0x72, 0x11, 0xF6, 0xC1, 0x0F, 0x75, 0x0C, 0xBF, 0xE7, 0x03, 0x8A, 0xC1, 0xA8, 0x70, 0x74, 0x03,
        0x80, 0xE9, 0x10, 0xF6, 0xC1, 0x91, 0x03, 0xBA, 0x40, 0x00, 0x52, 0x8B, 0xC5, 0x98, 0xD1, 0xE0, 0x03, 0xF8, 0x8B,
        0x05, 0x80, 0xE1, 0x70, 0xA2, 0xA2, 0x80, 0xE9, 0x07, 0xF6, 0xD9, 0xD3, 0xE0, 0x59, 0xF7, 0xC1, 0xA4, 0x06, 0xB9,
        0x87, 0x5B, 0x5F, 0xC3, 0x33, 0xC9, 0x5B, 0x5F, 0xC3, 0xB0, 0xB6, 0xE6, 0x43, 0xE4, 0x61, 0x24, 0xFC, 0xE6, 0x61,
        0xC3, 0x79, 0x02, 0x72, 0x14, 0x6E, 0x64, 0x01, 0xF6, 0xC4, 0x80, 0x75, 0x01, 0xC3, 0x32, 0xC0, 0x89, 0x05, 0x6E,
        0x04, 0x88, 0x71, 0x79, 0x04, 0x76, 0x27, 0x8A, 0x71, 0x0A, 0xC0, 0x74, 0x06, 0xFE, 0xC8, 0x88, 0x71, 0xC3, 0x79,
        0x96, 0x08, 0x7D, 0x96, 0x01, 0xC3, 0x83, 0x0D, 0x04, 0x79, 0x00, 0x20, 0x74, 0x03, 0x83, 0x0D, 0x02, 0x83, 0xE2,
        0xFC, 0xC3, 0x93, 0x02, 0x72, 0x18, 0x6E, 0x64, 0x0C, 0xF6, 0xC4, 0x80, 0x75, 0x01, 0xC3, 0x32, 0xC0, 0xC7, 0x7A,
        0x16, 0xC7, 0x05, 0x16, 0x89, 0x71, 0x56, 0x8B, 0x2D, 0x2E, 0x03, 0xB6, 0x7B, 0x01, 0x2E, 0xFF, 0xA6, 0x85, 0x01,
        0x93, 0x01, 0x76, 0x20, 0x6E, 0x04, 0xA8, 0x40, 0x74, 0x09, 0xC7, 0x05, 0x08, 0x00, 0x94, 0x24, 0x3F, 0x84, 0x06,
        0x82, 0x02, 0x97, 0x83, 0x4D, 0x02, 0x05, 0x8A, 0x45, 0x07, 0x0A, 0xC0, 0x74, 0x0A, 0xFE, 0xC8, 0x97, 0x94, 0x8A,
        0x45, 0x06, 0x0A, 0xC0, 0x74, 0x2C, 0xFE, 0xC8, 0x84, 0x06, 0x82, 0x02, 0x97, 0x82, 0x01, 0x98, 0x03, 0x7A, 0x89,
        0x7A, 0x94, 0x93, 0x00, 0x20, 0x74, 0x04, 0x83, 0x4D, 0x02, 0x02, 0x94, 0x93, 0x04, 0x72, 0x2B, 0x83, 0x65, 0x02,
        0xFB, 0x26, 0xF6, 0x04, 0x91, 0x0D, 0x82, 0x03, 0x98, 0x03, 0x7A, 0x89, 0x7A, 0xEB, 0x9E, 0x82, 0x01, 0x98, 0x03,
        0x7A, 0x89, 0x7A, 0x82, 0x03, 0x97, 0xEB, 0x8A, 0x83, 0x65, 0x02, 0xFE, 0x8B, 0x05, 0x05, 0x02, 0x00, 0x89, 0x05,
        0x5E, 0xE9, 0x47, 0xFF, 0x93, 0x96, 0xEA, 0x7D, 0x96, 0xE3, 0x94, 0x56, 0x57, 0x8B, 0x6D, 0xA9, 0xA4, 0x2E, 0xA9,
        0x02, 0x76, 0x2D, 0xFF, 0x4F, 0x0E, 0x75, 0x24, 0x8B, 0x47, 0x10, 0x89, 0x47, 0x0E, 0xC4, 0x77, 0x0A, 0x26, 0xAD,
        0x89, 0x77, 0x0A, 0x99, 0x0C, 0x8A, 0xCC, 0x32, 0xED, 0x32, 0xE4, 0xD0, 0xE0, 0x8B, 0xF8, 0x9C, 0x2E, 0xFF, 0x95,
        0xEA, 0x03, 0x9D, 0x73, 0xE2, 0x5F, 0x86, 0xC3, 0xC4, 0x47, 0x06, 0x89, 0x47, 0x0A, 0x99, 0x0C, 0x83, 0x67, 0x04,
        0xFD, 0xC7, 0x47, 0x18, 0x16, 0xEB, 0xCA, 0x53, 0x1E, 0x51, 0x8B, 0x07, 0x50, 0x2E, 0xFF, 0x1E, 0xFE, 0x03, 0x83,
        0xC4, 0x04, 0x1F, 0x5B, 0xC3, 0xA3, 0x02, 0x7D, 0x20, 0x76, 0x1A, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27,
        0xA3, 0x40, 0x7D, 0x00, 0x91, 0x07, 0xA5, 0x02, 0x83, 0x64, 0x04, 0xFB, 0xC3, 0x7C, 0x17, 0xC3, 0xFF, 0x47, 0x18,
        0x9F, 0x15, 0x8A, 0x2F, 0x33, 0xED, 0x8B, 0x57, 0x04, 0xE8, 0xC6, 0xFD, 0x89, 0x47, 0x23, 0x8B, 0x6D, 0x25, 0xFF,
        0xBF, 0x0B, 0xC1, 0x89, 0x6D, 0xA9, 0x96, 0x0D, 0xA5, 0x1F, 0x83, 0x4C, 0x02, 0x02, 0xA5, 0x21, 0x83, 0x0C, 0x02,
        0xC3, 0x26, 0xAC, 0x8A, 0xE8, 0x03, 0x4F, 0x13, 0x9F, 0x10, 0x9F, 0x0E, 0x89, 0x77, 0x0A, 0x99, 0x0C, 0xC3, 0xC3,
        0x7C, 0x12, 0xB0, 0x10, 0xF6, 0xE1, 0x2E, 0xC4, 0x36, 0x18, 0x04, 0x03, 0xF0, 0x89, 0x77, 0x25, 0x99, 0x27, 0xC3,
        0x50, 0x52, 0x06, 0x1E, 0x56, 0x57, 0x55, 0x2E, 0xF6, 0x06, 0x00, 0x04, 0xFF, 0x74, 0x08, 0x5D, 0x5F, 0x5E, 0x1F,
        0x07, 0x5A, 0x58, 0xC3, 0xBB, 0x9B, 0x8B, 0xF3, 0x2E, 0xA1, 0x0C, 0x9A, 0x18, 0x8E, 0xA1, 0x0E, 0x9A, 0x1A, 0x04,
        0xE8, 0xEB, 0xFE, 0x7D, 0x04, 0x72, 0x1A, 0x2E, 0xA1, 0x10, 0x9A, 0x18, 0x8E, 0xA1, 0x12, 0x9A, 0x1A, 0x04, 0x53,
        0x8B, 0x5F, 0x02, 0x8B, 0xF3, 0xE8, 0xCB, 0xFE, 0x5B, 0x8B, 0xDE, 0xC4, 0x77, 0x25, 0x46, 0x8B, 0x57, 0x23, 0x26,
        0xF6, 0x44, 0x0C, 0x91, 0x06, 0x8B, 0x7F, 0x1F, 0xE8, 0xC9, 0xFD, 0x8A, 0xC2, 0xE6, 0x42, 0x8A, 0xC6, 0xE6, 0x42,
        0x83, 0xC6, 0x0D, 0x33, 0xD2, 0x26, 0xF6, 0x44, 0x01, 0x91, 0x09, 0xBA, 0x03, 0x00, 0x8B, 0x7F, 0x21, 0xE8, 0x61,
        0xFD, 0xE4, 0x61, 0x24, 0xFC, 0x0A, 0xC2, 0xE6, 0x61, 0x5D, 0x5F, 0x5E, 0x1F, 0x07, 0x5A, 0x58, 0xC3, 0xC3, 0x8C,
        0xC8, 0x8B, 0xD0, 0xB8, 0xFE, 0x03, 0xC3, 0x8B, 0xEE, 0xBE, 0xFF, 0xFF, 0x0B, 0xED, 0x75, 0x03, 0xBD, 0x01, 0x00,
        0xBB, 0x9B, 0xBF, 0x01, 0x00, 0x85, 0xEF, 0x74, 0x08, 0x8B, 0x47, 0x06, 0x0B, 0x47, 0x08, 0x75, 0x03, 0xE9, 0xC1,
        0x00, 0x92, 0x01, 0x74, 0x1F, 0x0B, 0xC9, 0x74, 0x09, 0x2E, 0xC6, 0x06, 0x00, 0x04, 0x00, 0xEB, 0x0A, 0x90, 0x2E,
        0xC6, 0x06, 0x00, 0x04, 0x01, 0xE8, 0x00, 0xFD, 0x92, 0x04, 0x74, 0x03, 0x9F, 0x13, 0x6C, 0x40, 0x72, 0x13, 0x7D,
        0xA4, 0x0C, 0xA3, 0x40, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x6C, 0x80, 0x72, 0x11, 0xC6, 0x47, 0x1D,
        0x0F, 0xC6, 0x47, 0x1A, 0x0F, 0xC6, 0x47, 0x1E, 0x00, 0xC7, 0x6D, 0x02, 0x00, 0x6C, 0x20, 0x72, 0x04, 0xA3, 0x20,
        0x92, 0x20, 0x74, 0x17, 0x6C, 0x10, 0x76, 0x11, 0x51, 0xA2, 0x6F, 0x83, 0xE1, 0x0F, 0x7C, 0x1D, 0x7C, 0x1A, 0x59,
        0x92, 0x91, 0x0E, 0x51, 0xA2, 0x6F, 0x83, 0xE1, 0x0F, 0x7C, 0x1A, 0x59, 0x92, 0x10, 0x74, 0x06, 0x7C, 0x1B, 0x7C,
        0x1C, 0x6C, 0x10, 0x72, 0x1F, 0x92, 0x20, 0x75, 0x12, 0x7D, 0xA4, 0x12, 0x3B, 0x77, 0x18, 0x7F, 0x0D, 0xA5, 0x18,
        0xEB, 0x08, 0x90, 0x38, 0x4F, 0x1D, 0x74, 0x02, 0x33, 0xF6, 0xD1, 0xE7, 0x83, 0xC3, 0x29, 0x81, 0x22, 0x00, 0xAD,
        0x02, 0x1B, 0x1C, 0x22, 0x24, 0x28, 0x2A, 0x2D, 0x30, 0x34, 0x37, 0x3D, 0x3F, 0x48, 0x4B, 0x4E, 0x4B, 0x58, 0x60,
        0x61, 0x62, 0x61, 0x63, 0x64, 0x63, 0x64, 0x63, 0x64, 0x65, 0x64, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x26, 0xF7, 0xD1,
        0x04, 0x04, 0x52, 0xD0, 0x1C, 0x19, 0x8B, 0x00, 0x83, 0xC7, 0x25, 0x4B, 0x89, 0xCD, 0x8B, 0x24, 0x61, 0x01, 0x3F,
        0x63, 0x64, 0x63, 0x64, 0x83, 0x64, 0xBB, 0x83, 0x89, 0x0B, 0x04, 0x22, 0x8B, 0xC2, 0xEA, 0x2E, 0x40, 0x01, 0xE9,
        0x00, 0x01, 0x77, 0x74, 0x4F, 0x47, 0x34, 0x8C, 0x47, 0x21, 0xFE, 0x8C, 0x06, 0x00, 0x28, 0x48, 0x4E, 0x4F, 0x27,
        0xC3, 0x29, 0x2A, 0x4C, 0x3E, 0xD0, 0x26, 0x22, 0xFB, 0x7B, 0x01, 0x72, 0x0C, 0x8B, 0xC6, 0x30, 0x02, 0x74, 0x03,
        0xE8, 0x00, 0xFF, 0xC3, 0xE9, 0x16, 0xFF, 0x8B, 0xEE, 0xBE, 0xFF, 0xFF, 0x0B, 0xED, 0x75, 0x03, 0xBD, 0x61, 0xBB,
        0x29, 0x01, 0xBF, 0x61, 0x85, 0xEF, 0x75, 0x03, 0xE9, 0xC7, 0x00, 0x30, 0x04, 0x74, 0x03, 0x89, 0x4F, 0x13, 0x1C,
        0x40, 0x3D, 0x0C, 0x63, 0x1C, 0x80, 0x3D, 0x46, 0x30, 0x40, 0x74, 0x07, 0xF7, 0x47, 0x28, 0x3D, 0x39, 0x56, 0x51,
        0x2E, 0xC4, 0x36, 0x14, 0x04, 0x8B, 0xC1, 0x8B, 0xCE, 0x8D, 0x74, 0x12, 0xD1, 0xE0, 0xD1, 0xE0, 0x03, 0xF0, 0x1B,
        0x04, 0x03, 0xC1, 0x4B, 0x06, 0x8C, 0x47, 0x08, 0x48, 0x04, 0x02, 0x80, 0xC6, 0x47, 0x1D, 0x0F, 0xC6, 0x47, 0x1A,
        0x0F, 0xC6, 0x47, 0x1E, 0x00, 0x37, 0x02, 0x66, 0x04, 0x04, 0x59, 0x5E, 0x1C, 0x20, 0x3D, 0x04, 0x3F, 0x04, 0x20,
        0x30, 0x20, 0x74, 0x17, 0x1C, 0x10, 0x00, 0x75, 0x11, 0x51, 0x2D, 0x2D, 0x2D, 0x83, 0xE1, 0x0F, 0x88, 0x4F, 0x1D,
        0x88, 0x4F, 0x1A, 0x59, 0x30, 0x80, 0x74, 0x0E, 0x51, 0x2D, 0x2D, 0x2D, 0x83, 0xE1, 0x0F, 0x88, 0x4F, 0x1A, 0x59,
        0x1C, 0x10, 0x3D, 0x1F, 0x30, 0x20, 0x75, 0x12, 0xF7, 0x47, 0x28, 0x00, 0x75, 0x12, 0x3B, 0x77, 0x18, 0x7F, 0x0D,
        0x37, 0x18, 0xEB, 0x08, 0x90, 0x38, 0x4F, 0x1D, 0x74, 0x02, 0x33, 0xF6, 0xD1, 0xE7, 0x65, 0x81, 0xFB, 0x2A, 0x72,
        0x03, 0x8B, 0xC6, 0xC3, 0xE9, 0x21, 0xFF, 0x8E, 0xC2, 0x33, 0xC9, 0xBD, 0x61, 0x64, 0x60, 0x8B, 0xD1, 0xD1, 0xE2,
        0xD1, 0xE2, 0x03, 0xFA, 0x1B, 0x45, 0x08, 0x1B, 0x55, 0x0A, 0x68, 0x75, 0x15, 0xD1, 0xE5, 0x83, 0xC7, 0x04, 0x41,
        0x83, 0xF9, 0x0B, 0x75, 0xE9, 0x33, 0xC0, 0x4B, 0x06, 0x4B, 0x08, 0xEB, 0x11, 0x2E, 0x85, 0x2E, 0x02, 0x04, 0x74,
        0xE4, 0x60, 0x03, 0xF8, 0x89, 0x7F, 0x06, 0x8C, 0x47, 0x08, 0x63, 0x41, 0x65, 0x83, 0xF9, 0x01, 0x72, 0xAF, 0x1B,
        0x44, 0x04, 0x1B, 0x54, 0x06, 0x68, 0x74, 0x1B, 0xFE, 0x03, 0xF8, 0x26, 0x80, 0x7D, 0x04, 0x42, 0x74, 0x09, 0x1B,
        0x05, 0x1B, 0x55, 0x02, 0xEB, 0xE8, 0x83, 0xC7, 0x24, 0x67, 0x0C, 0x62, 0x0E, 0x62, 0x1A, 0x04, 0xC3, 0x8E, 0xC2,
        0x60, 0x8B, 0xF7, 0x2E, 0x67, 0x14, 0x62, 0x16, 0x04, 0x1B, 0x44, 0x04, 0x1B, 0x54, 0x06, 0x68, 0x74, 0x17, 0x60,
        0x03, 0xF8, 0x26, 0x80, 0x7D, 0x04, 0x42, 0x74, 0x09, 0x1B, 0x05, 0x1B, 0x55, 0x02, 0xEB, 0xE8, 0x83, 0xC7, 0x24,
        0x67, 0x10, 0x62, 0x12, 0x04, 0xBB, 0x29, 0x01, 0x63, 0x65, 0x81, 0xFB, 0x2A, 0x72, 0xEB, 0xC3, 0xB8, 0x4D, 0x42,
        0xBA, 0x61, 0xC3, 0x33, 0xC0, 0x8E, 0xC0, 0xBE, 0xC0, 0x03, 0x2E, 0xA1, 0x08, 0x69, 0x89, 0x24, 0xA1, 0x0A, 0x69,
        0x89, 0x44, 0x02, 0x2E, 0x8E, 0x06, 0x2C, 0x00, 0xB4, 0x49, 0x58, 0x8C, 0xC8, 0x8E, 0xC0, 0xB4, 0x49, 0x58, 0xC3,
        0x64, 0x33, 0xC9, 0x63, 0x37, 0x02, 0x66, 0x28, 0xC7, 0x44, 0x4E, 0x4C, 0x27, 0x65, 0x41, 0x83, 0xF9, 0x01, 0x75,
        0xDC, 0xE8, 0x11, 0xFA, 0xC3, 0x64, 0x88, 0x57, 0x17, 0x32, 0xED, 0x89, 0x4F, 0x15, 0x8A, 0x2F, 0x33, 0xED, 0x8B,
        0x57, 0x04, 0x33, 0xD2, 0xE8, 0x9B, 0xF9, 0x4B, 0x23, 0x8B, 0x47, 0x04, 0x25, 0xFF, 0xBF, 0x0B, 0xC1, 0x4B, 0x04,
        0xA9, 0x00, 0x40, 0x74, 0x0D, 0x37, 0x21, 0x83, 0x0C, 0x02, 0x37, 0x1F, 0x66, 0x02, 0x02, 0xC3, 0xC3, 0x64, 0x0A,
        0xC0, 0x75, 0x1E, 0x8B, 0xC2, 0x0B, 0xC6, 0x75, 0x05, 0x8C, 0xCA, 0xBE, 0x34, 0x89, 0x57, 0x27, 0x89, 0x77, 0x25,
        0x88, 0x6F, 0x12, 0x37, 0x1F, 0x66, 0x02, 0x01, 0xC4, 0x77, 0x25, 0xC3, 0xA2, 0x06, 0x3E, 0x0A, 0x7B, 0x04, 0x2B,
        0x09, 0xB9, 0x09, 0x3E, 0x07, 0x3A, 0x08, 0x16, 0x0A, 0x0F, 0x0A, 0x36, 0x07, 0x35, 0x07, 0x6B, 0x0A, 0xA4, 0x0A,
        0xA3, 0x0A, 0xEB, 0x0E, 0x49, 0x46, 0x47, 0x4D, 0x20, 0x42, 0x55, 0x5A, 0x45, 0x52, 0x20, 0x50, 0x43, 0x00, 0x1E,
        0x06, 0x56, 0x57, 0x53, 0x51, 0x55, 0xFC, 0x8C, 0xCB, 0x8E, 0xDB, 0x33, 0xDB, 0x8A, 0xDC, 0x2E, 0xFF, 0x97, 0xCA,
        0x0A, 0x5D, 0x59, 0x5B, 0x5F, 0x5E, 0x07, 0x1F, 0xCF, 0xBC, 0x00, 0x01, 0xBA, 0x87, 0x0B, 0x6A, 0x6A, 0x42, 0xB4,
        0x4A, 0x58, 0x33, 0xC0, 0x8E, 0xC0, 0xBE, 0xC0, 0x03, 0x1B, 0x3C, 0x2E, 0x67, 0x08, 0x69, 0x8E, 0x5C, 0x02, 0x2E,
        0x8C, 0x1E, 0x0A, 0x04, 0x8B, 0xC7, 0x8C, 0xDA, 0x68, 0x74, 0x19, 0x8B, 0x4D, 0x02, 0x8B, 0x55, 0x04, 0x81, 0xF9,
        0x49, 0x46, 0x75, 0x0D, 0x81, 0xFA, 0x47, 0x4D, 0x75, 0x07, 0xB0, 0xFF, 0xB4, 0x4C, 0x58, 0xC3, 0x2E, 0xC7, 0x06,
        0x04, 0x04, 0x2A, 0x2E, 0x8C, 0x0E, 0x06, 0x04, 0xB8, 0xE6, 0x0A, 0x26, 0x89, 0x69, 0x8C, 0x4C, 0x02, 0x32, 0xC0,
        0xBA, 0x13, 0x0B, 0x6A, 0x6A, 0x42, 0xB4, 0x31, 0x58 };

    const uint8_t uncompressed_example[] = {
        0xE9, 0x10, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x01, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x01, 0x16, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
        0x01, 0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0xFD, 0x04, 0xFD, 0x04, 0xA9, 0x05, 0xFD, 0x04, 0x58, 0x05, 0xA7, 0x01, 0xD7, 0x01, 0x07, 0x02, 0x37, 0x02, 0x67,
        0x02, 0x97, 0x02, 0xC7, 0x02, 0xF7, 0x02, 0x27, 0x03, 0x57, 0x03, 0x87, 0x03, 0xB7, 0x03, 0x3A, 0x02, 0x38, 0x02,
        0x37, 0x02, 0x35, 0x02, 0x34, 0x02, 0x33, 0x02, 0x31, 0x02, 0x30, 0x02, 0x2F, 0x02, 0x2D, 0x02, 0x2C, 0x02, 0x2B,
        0x02, 0x29, 0x02, 0x28, 0x02, 0x27, 0x02, 0x25, 0x02, 0x24, 0x02, 0x23, 0x02, 0x21, 0x02, 0x20, 0x02, 0x1F, 0x02,
        0x1D, 0x02, 0x1C, 0x02, 0x1B, 0x02, 0x1A, 0x02, 0x18, 0x02, 0x17, 0x02, 0x16, 0x02, 0x14, 0x02, 0x13, 0x02, 0x12,
        0x02, 0x11, 0x02, 0x0F, 0x02, 0x0E, 0x02, 0x0D, 0x02, 0x0B, 0x02, 0x0A, 0x02, 0x09, 0x02, 0x08, 0x02, 0x06, 0x02,
        0x05, 0x02, 0x04, 0x02, 0x03, 0x02, 0x02, 0x02, 0x00, 0x02, 0xFF, 0x01, 0xFE, 0x01, 0xFD, 0x01, 0xFB, 0x01, 0xFA,
        0x01, 0xF9, 0x01, 0xF8, 0x01, 0xF6, 0x01, 0xF5, 0x01, 0xF4, 0x01, 0xF3, 0x01, 0xF2, 0x01, 0xF0, 0x01, 0xEF, 0x01,
        0xEE, 0x01, 0xED, 0x01, 0xEC, 0x01, 0xEA, 0x01, 0xE9, 0x01, 0xE8, 0x01, 0xE7, 0x01, 0xE6, 0x01, 0xE4, 0x01, 0xE3,
        0x01, 0xE2, 0x01, 0xE1, 0x01, 0xE0, 0x01, 0xDF, 0x01, 0xDE, 0x01, 0xDC, 0x01, 0xDB, 0x01, 0xDA, 0x01, 0xD9, 0x01,
        0xD8, 0x01, 0xD7, 0x01, 0xD6, 0x01, 0xD4, 0x01, 0xD3, 0x01, 0xD2, 0x01, 0xD1, 0x01, 0xD0, 0x01, 0xCF, 0x01, 0xCE,
        0x01, 0xCD, 0x01, 0xCC, 0x01, 0xCA, 0x01, 0xC9, 0x01, 0xC8, 0x01, 0xC7, 0x01, 0xC6, 0x01, 0xC5, 0x01, 0xC4, 0x01,
        0xC3, 0x01, 0xC2, 0x01, 0xC1, 0x01, 0xC0, 0x01, 0xBE, 0x01, 0xBD, 0x01, 0xBC, 0x01, 0xBB, 0x01, 0xBA, 0x01, 0xB9,
        0x01, 0xB8, 0x01, 0xB7, 0x01, 0xB6, 0x01, 0xB5, 0x01, 0xB4, 0x01, 0xB3, 0x01, 0xB2, 0x01, 0xB1, 0x01, 0xB0, 0x01,
        0xAF, 0x01, 0xAE, 0x01, 0xAD, 0x01, 0xAC, 0x01, 0xAB, 0x01, 0xA9, 0x01, 0xA8, 0x01, 0xA7, 0x01, 0xA6, 0x01, 0xA5,
        0x01, 0xA4, 0x01, 0xA3, 0x01, 0xA2, 0x01, 0xA1, 0x01, 0xA0, 0x01, 0x9F, 0x01, 0x9E, 0x01, 0x9D, 0x01, 0x9C, 0x01,
        0x9B, 0x01, 0x9A, 0x01, 0x99, 0x01, 0x98, 0x01, 0x97, 0x01, 0x96, 0x01, 0x96, 0x01, 0x95, 0x01, 0x94, 0x01, 0x93,
        0x01, 0x92, 0x01, 0x91, 0x01, 0x90, 0x01, 0x8F, 0x01, 0x8E, 0x01, 0x8D, 0x01, 0x8C, 0x01, 0x8B, 0x01, 0x8A, 0x01,
        0x89, 0x01, 0x88, 0x01, 0x87, 0x01, 0x86, 0x01, 0x85, 0x01, 0x84, 0x01, 0x83, 0x01, 0x82, 0x01, 0x81, 0x01, 0x80,
        0x01, 0x80, 0x01, 0x7F, 0x01, 0x7E, 0x01, 0x7D, 0x01, 0x7C, 0x01, 0x7B, 0x01, 0x7A, 0x01, 0x79, 0x01, 0x78, 0x01,
        0x77, 0x01, 0x76, 0x01, 0x75, 0x01, 0x75, 0x01, 0x74, 0x01, 0x73, 0x01, 0x72, 0x01, 0x71, 0x01, 0x70, 0x01, 0x6F,
        0x01, 0x6E, 0x01, 0x6D, 0x01, 0x6D, 0x01, 0x6C, 0x01, 0x6B, 0x01, 0x6A, 0x01, 0x69, 0x01, 0x68, 0x01, 0x67, 0x01,
        0x67, 0x01, 0x66, 0x01, 0x65, 0x01, 0x64, 0x01, 0x63, 0x01, 0x62, 0x01, 0x61, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5F,
        0x01, 0x5E, 0x01, 0x5D, 0x01, 0x5C, 0x01, 0x5B, 0x01, 0x5B, 0x01, 0x5A, 0x01, 0x59, 0x01, 0x58, 0x01, 0x57, 0x01,
        0x56, 0x01, 0x56, 0x01, 0x55, 0x01, 0x54, 0x01, 0x53, 0x01, 0x52, 0x01, 0x52, 0x01, 0x51, 0x01, 0x50, 0x01, 0x4F,
        0x01, 0x4E, 0x01, 0x4D, 0x01, 0x4D, 0x01, 0x4C, 0x01, 0x4B, 0x01, 0x4A, 0x01, 0x49, 0x01, 0x49, 0x01, 0x48, 0x01,
        0x47, 0x01, 0x46, 0x01, 0x46, 0x01, 0x45, 0x01, 0x44, 0x01, 0x43, 0x01, 0x42, 0x01, 0x42, 0x01, 0x41, 0x01, 0x40,
        0x01, 0x3F, 0x01, 0x3F, 0x01, 0x3E, 0x01, 0x3D, 0x01, 0x3C, 0x01, 0x3B, 0x01, 0x3B, 0x01, 0x3A, 0x01, 0x39, 0x01,
        0x38, 0x01, 0x38, 0x01, 0x37, 0x01, 0x36, 0x01, 0x35, 0x01, 0x35, 0x01, 0x34, 0x01, 0x33, 0x01, 0x32, 0x01, 0x32,
        0x01, 0x31, 0x01, 0x30, 0x01, 0x30, 0x01, 0x2F, 0x01, 0x2E, 0x01, 0x2D, 0x01, 0x2D, 0x01, 0x2C, 0x01, 0x2B, 0x01,
        0x2B, 0x01, 0x2A, 0x01, 0x29, 0x01, 0x28, 0x01, 0x28, 0x01, 0x27, 0x01, 0x26, 0x01, 0x25, 0x01, 0x25, 0x01, 0x24,
        0x01, 0x23, 0x01, 0x23, 0x01, 0x22, 0x01, 0x21, 0x01, 0x21, 0x01, 0x20, 0x01, 0x1F, 0x01, 0x1F, 0x01, 0x1E, 0x01,
        0x1D, 0x01, 0x80, 0xA0, 0xC0, 0x1D, 0x06, 0x78, 0x06, 0x47, 0x06, 0x8D, 0x06, 0x8C, 0x06, 0x43, 0x06, 0x0C, 0x06,
        0xF7, 0x05, 0xF7, 0x05, 0xF7, 0x05, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x57,
        0x53, 0x33, 0xC0, 0x8A, 0xC1, 0x24, 0x0F, 0xD1, 0xE0, 0x8B, 0xF8, 0x2E, 0x8B, 0xBD, 0x8F, 0x01, 0xF7, 0xC5, 0x80,
        0x00, 0x74, 0x11, 0xF6, 0xC1, 0x0F, 0x75, 0x0C, 0xBF, 0xE7, 0x03, 0x8A, 0xC1, 0xA8, 0x70, 0x74, 0x03, 0x80, 0xE9,
        0x10, 0xF6, 0xC1, 0x80, 0x74, 0x03, 0xBA, 0x40, 0x00, 0x52, 0x8B, 0xC5, 0x98, 0xD1, 0xE0, 0x03, 0xF8, 0x8B, 0x05,
        0x80, 0xE1, 0x70, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0x80, 0xE9, 0x07, 0xF6, 0xD9, 0xD3, 0xE0, 0x59,
        0xF7, 0xC1, 0x40, 0x00, 0x75, 0x06, 0xB9, 0x00, 0x40, 0x5B, 0x5F, 0xC3, 0x33, 0xC9, 0x5B, 0x5F, 0xC3, 0xB0, 0xB6,
        0xE6, 0x43, 0xE4, 0x61, 0x24, 0xFC, 0xE6, 0x61, 0xC3, 0xF7, 0x05, 0x02, 0x00, 0x74, 0x14, 0x26, 0x8A, 0x64, 0x01,
        0xF6, 0xC4, 0x80, 0x75, 0x01, 0xC3, 0x32, 0xC0, 0x89, 0x05, 0x26, 0x8A, 0x04, 0x88, 0x45, 0x02, 0xF7, 0x05, 0x04,
        0x00, 0x75, 0x27, 0x8A, 0x45, 0x02, 0x0A, 0xC0, 0x74, 0x06, 0xFE, 0xC8, 0x88, 0x45, 0x02, 0xC3, 0xF7, 0x05, 0x00,
        0x40, 0x74, 0x08, 0xF7, 0x47, 0x04, 0x00, 0x40, 0x74, 0x01, 0xC3, 0x83, 0x0D, 0x04, 0xF7, 0x05, 0x00, 0x20, 0x74,
        0x03, 0x83, 0x0D, 0x02, 0x83, 0xE2, 0xFC, 0xC3, 0xF7, 0x45, 0x02, 0x02, 0x00, 0x74, 0x18, 0x26, 0x8A, 0x64, 0x0C,
        0xF6, 0xC4, 0x80, 0x75, 0x01, 0xC3, 0x32, 0xC0, 0xC7, 0x45, 0x04, 0x00, 0x00, 0xC7, 0x05, 0x00, 0x00, 0x89, 0x45,
        0x02, 0x56, 0x8B, 0x2D, 0x2E, 0x03, 0xB6, 0x7B, 0x01, 0x2E, 0xFF, 0xA6, 0x85, 0x01, 0xF7, 0x45, 0x02, 0x01, 0x00,
        0x75, 0x20, 0x26, 0x8A, 0x04, 0xA8, 0x40, 0x74, 0x09, 0xC7, 0x05, 0x08, 0x00, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0x24,
        0x3F, 0x88, 0x45, 0x06, 0x26, 0x8A, 0x44, 0x02, 0x88, 0x45, 0x07, 0x83, 0x4D, 0x02, 0x05, 0x8A, 0x45, 0x07, 0x0A,
        0xC0, 0x74, 0x0A, 0xFE, 0xC8, 0x88, 0x45, 0x07, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0x8A, 0x45, 0x06, 0x0A, 0xC0, 0x74,
        0x2C, 0xFE, 0xC8, 0x88, 0x45, 0x06, 0x26, 0x8A, 0x44, 0x02, 0x88, 0x45, 0x07, 0x26, 0x8A, 0x44, 0x01, 0x98, 0x03,
        0x45, 0x04, 0x89, 0x45, 0x04, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0xF7, 0x45, 0x02, 0x00, 0x20, 0x74, 0x04, 0x83, 0x4D,
        0x02, 0x02, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0xF7, 0x45, 0x02, 0x04, 0x00, 0x74, 0x2B, 0x83, 0x65, 0x02, 0xFB, 0x26,
        0xF6, 0x04, 0x80, 0x74, 0x0D, 0x26, 0x8A, 0x44, 0x03, 0x98, 0x03, 0x45, 0x04, 0x89, 0x45, 0x04, 0xEB, 0x9E, 0x26,
        0x8A, 0x44, 0x01, 0x98, 0x03, 0x45, 0x04, 0x89, 0x45, 0x04, 0x26, 0x8A, 0x44, 0x03, 0x88, 0x45, 0x07, 0xEB, 0x8A,
        0x83, 0x65, 0x02, 0xFE, 0x8B, 0x05, 0x05, 0x02, 0x00, 0x89, 0x05, 0x5E, 0xE9, 0x47, 0xFF, 0xF7, 0x45, 0x02, 0x00,
        0x40, 0x74, 0xEA, 0xF7, 0x47, 0x04, 0x00, 0x40, 0x74, 0xE3, 0x03, 0x55, 0x04, 0x5E, 0xC3, 0x56, 0x57, 0x8B, 0x47,
        0x04, 0xA9, 0x40, 0x00, 0x75, 0x2E, 0xA9, 0x02, 0x00, 0x75, 0x2D, 0xFF, 0x4F, 0x0E, 0x75, 0x24, 0x8B, 0x47, 0x10,
        0x89, 0x47, 0x0E, 0xC4, 0x77, 0x0A, 0x26, 0xAD, 0x89, 0x77, 0x0A, 0x8C, 0x47, 0x0C, 0x8A, 0xCC, 0x32, 0xED, 0x32,
        0xE4, 0xD0, 0xE0, 0x8B, 0xF8, 0x9C, 0x2E, 0xFF, 0x95, 0xEA, 0x03, 0x9D, 0x73, 0xE2, 0x5F, 0x5E, 0xC3, 0xC3, 0xC4,
        0x47, 0x06, 0x89, 0x47, 0x0A, 0x8C, 0x47, 0x0C, 0x83, 0x67, 0x04, 0xFD, 0xC7, 0x47, 0x18, 0x00, 0x00, 0xEB, 0xCA,
        0x53, 0x1E, 0x51, 0x8B, 0x07, 0x50, 0x2E, 0xFF, 0x1E, 0xFE, 0x03, 0x83, 0xC4, 0x04, 0x1F, 0x5B, 0xC3, 0x83, 0x4F,
        0x04, 0x02, 0xF7, 0x47, 0x04, 0x20, 0x00, 0x75, 0x1A, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x83, 0x4F,
        0x04, 0x40, 0xF7, 0x47, 0x04, 0x00, 0x80, 0x74, 0x07, 0x8B, 0x77, 0x02, 0x83, 0x64, 0x04, 0xFB, 0xC3, 0x88, 0x4F,
        0x17, 0xC3, 0xFF, 0x47, 0x18, 0x89, 0x4F, 0x15, 0x8A, 0x2F, 0x33, 0xED, 0x8B, 0x57, 0x04, 0xE8, 0xC6, 0xFD, 0x89,
        0x47, 0x23, 0x8B, 0x47, 0x04, 0x25, 0xFF, 0xBF, 0x0B, 0xC1, 0x89, 0x47, 0x04, 0xA9, 0x00, 0x40, 0x74, 0x0D, 0x8B,
        0x77, 0x1F, 0x83, 0x4C, 0x02, 0x02, 0x8B, 0x77, 0x21, 0x83, 0x0C, 0x02, 0xC3, 0x26, 0xAC, 0x8A, 0xE8, 0x03, 0x4F,
        0x13, 0x89, 0x4F, 0x10, 0x89, 0x4F, 0x0E, 0x89, 0x77, 0x0A, 0x8C, 0x47, 0x0C, 0xC3, 0xC3, 0x88, 0x4F, 0x12, 0xB0,
        0x10, 0xF6, 0xE1, 0x2E, 0xC4, 0x36, 0x18, 0x04, 0x03, 0xF0, 0x89, 0x77, 0x25, 0x8C, 0x47, 0x27, 0xC3, 0x50, 0x52,
        0x06, 0x1E, 0x56, 0x57, 0x55, 0x2E, 0xF6, 0x06, 0x00, 0x04, 0xFF, 0x74, 0x08, 0x5D, 0x5F, 0x5E, 0x1F, 0x07, 0x5A,
        0x58, 0xC3, 0xBB, 0x52, 0x01, 0x8B, 0xF3, 0x2E, 0xA1, 0x0C, 0x04, 0x2E, 0xA3, 0x18, 0x04, 0x2E, 0xA1, 0x0E, 0x04,
        0x2E, 0xA3, 0x1A, 0x04, 0xE8, 0xEB, 0xFE, 0xF7, 0x47, 0x04, 0x04, 0x00, 0x74, 0x1A, 0x2E, 0xA1, 0x10, 0x04, 0x2E,
        0xA3, 0x18, 0x04, 0x2E, 0xA1, 0x12, 0x04, 0x2E, 0xA3, 0x1A, 0x04, 0x53, 0x8B, 0x5F, 0x02, 0x8B, 0xF3, 0xE8, 0xCB,
        0xFE, 0x5B, 0x8B, 0xDE, 0xC4, 0x77, 0x25, 0x46, 0x8B, 0x57, 0x23, 0x26, 0xF6, 0x44, 0x0C, 0x80, 0x74, 0x06, 0x8B,
        0x7F, 0x1F, 0xE8, 0xC9, 0xFD, 0x8A, 0xC2, 0xE6, 0x42, 0x8A, 0xC6, 0xE6, 0x42, 0x83, 0xC6, 0x0D, 0x33, 0xD2, 0x26,
        0xF6, 0x44, 0x01, 0x80, 0x74, 0x09, 0xBA, 0x03, 0x00, 0x8B, 0x7F, 0x21, 0xE8, 0x61, 0xFD, 0xE4, 0x61, 0x24, 0xFC,
        0x0A, 0xC2, 0xE6, 0x61, 0x5D, 0x5F, 0x5E, 0x1F, 0x07, 0x5A, 0x58, 0xC3, 0xC3, 0x8C, 0xC8, 0x8B, 0xD0, 0xB8, 0xFE,
        0x03, 0xC3, 0x8B, 0xEE, 0xBE, 0xFF, 0xFF, 0x0B, 0xED, 0x75, 0x03, 0xBD, 0x01, 0x00, 0xBB, 0x52, 0x01, 0xBF, 0x01,
        0x00, 0x85, 0xEF, 0x74, 0x08, 0x8B, 0x47, 0x06, 0x0B, 0x47, 0x08, 0x75, 0x03, 0xE9, 0xC1, 0x00, 0xF7, 0xC2, 0x00,
        0x01, 0x74, 0x1F, 0x0B, 0xC9, 0x74, 0x09, 0x2E, 0xC6, 0x06, 0x00, 0x04, 0x00, 0xEB, 0x0A, 0x90, 0x2E, 0xC6, 0x06,
        0x00, 0x04, 0x01, 0xE8, 0x00, 0xFD, 0xF7, 0xC2, 0x00, 0x04, 0x74, 0x03, 0x89, 0x4F, 0x13, 0xF7, 0xC2, 0x40, 0x00,
        0x74, 0x13, 0xF7, 0x47, 0x04, 0x40, 0x00, 0x75, 0x0C, 0x83, 0x4F, 0x04, 0x40, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C,
        0x4F, 0x27, 0xF7, 0xC2, 0x80, 0x00, 0x74, 0x11, 0xC6, 0x47, 0x1D, 0x0F, 0xC6, 0x47, 0x1A, 0x0F, 0xC6, 0x47, 0x1E,
        0x00, 0xC7, 0x47, 0x04, 0x02, 0x00, 0xF7, 0xC2, 0x20, 0x00, 0x74, 0x04, 0x83, 0x4F, 0x04, 0x20, 0xF7, 0xC2, 0x00,
        0x20, 0x74, 0x17, 0xF7, 0xC2, 0x10, 0x00, 0x75, 0x11, 0x51, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0x83, 0xE1, 0x0F,
        0x88, 0x4F, 0x1D, 0x88, 0x4F, 0x1A, 0x59, 0xF7, 0xC2, 0x00, 0x80, 0x74, 0x0E, 0x51, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0,
        0xE9, 0x83, 0xE1, 0x0F, 0x88, 0x4F, 0x1A, 0x59, 0xF7, 0xC2, 0x00, 0x10, 0x74, 0x06, 0x88, 0x4F, 0x1B, 0x88, 0x4F,
        0x1C, 0xF7, 0xC2, 0x10, 0x00, 0x74, 0x1F, 0xF7, 0xC2, 0x00, 0x20, 0x75, 0x12, 0xF7, 0x47, 0x04, 0x40, 0x00, 0x75,
        0x12, 0x3B, 0x77, 0x18, 0x7F, 0x0D, 0x8B, 0x77, 0x18, 0xEB, 0x08, 0x90, 0x38, 0x4F, 0x1D, 0x74, 0x02, 0x33, 0xF6,
        0xD1, 0xE7, 0x83, 0xC3, 0x29, 0x81, 0xFB, 0x7B, 0x01, 0x72, 0x0C, 0x8B, 0xC6, 0xF7, 0xC2, 0x00, 0x02, 0x74, 0x03,
        0xE8, 0x00, 0xFF, 0xC3, 0xE9, 0x16, 0xFF, 0x8B, 0xEE, 0xBE, 0xFF, 0xFF, 0x0B, 0xED, 0x75, 0x03, 0xBD, 0x01, 0x00,
        0xBB, 0x29, 0x01, 0xBF, 0x01, 0x00, 0x85, 0xEF, 0x75, 0x03, 0xE9, 0xC7, 0x00, 0xF7, 0xC2, 0x00, 0x04, 0x74, 0x03,
        0x89, 0x4F, 0x13, 0xF7, 0xC2, 0x40, 0x00, 0x74, 0x0C, 0x83, 0x4F, 0x04, 0x40, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C,
        0x4F, 0x27, 0xF7, 0xC2, 0x80, 0x00, 0x74, 0x46, 0xF7, 0xC2, 0x00, 0x40, 0x74, 0x07, 0xF7, 0x47, 0x04, 0x40, 0x00,
        0x74, 0x39, 0x56, 0x51, 0x2E, 0xC4, 0x36, 0x14, 0x04, 0x8B, 0xC1, 0x8B, 0xCE, 0x8D, 0x74, 0x12, 0xD1, 0xE0, 0xD1,
        0xE0, 0x03, 0xF0, 0x26, 0x8B, 0x04, 0x03, 0xC1, 0x89, 0x47, 0x06, 0x8C, 0x47, 0x08, 0xC7, 0x47, 0x04, 0x02, 0x80,
        0xC6, 0x47, 0x1D, 0x0F, 0xC6, 0x47, 0x1A, 0x0F, 0xC6, 0x47, 0x1E, 0x00, 0x8B, 0x77, 0x02, 0x83, 0x4C, 0x04, 0x04,
        0x59, 0x5E, 0xF7, 0xC2, 0x20, 0x00, 0x74, 0x04, 0x83, 0x4F, 0x04, 0x20, 0xF7, 0xC2, 0x00, 0x20, 0x74, 0x17, 0xF7,
        0xC2, 0x10, 0x00, 0x75, 0x11, 0x51, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0x83, 0xE1, 0x0F, 0x88, 0x4F, 0x1D, 0x88,
        0x4F, 0x1A, 0x59, 0xF7, 0xC2, 0x00, 0x80, 0x74, 0x0E, 0x51, 0xD0, 0xE9, 0xD0, 0xE9, 0xD0, 0xE9, 0x83, 0xE1, 0x0F,
        0x88, 0x4F, 0x1A, 0x59, 0xF7, 0xC2, 0x10, 0x00, 0x74, 0x1F, 0xF7, 0xC2, 0x00, 0x20, 0x75, 0x12, 0xF7, 0x47, 0x04,
        0x40, 0x00, 0x75, 0x12, 0x3B, 0x77, 0x18, 0x7F, 0x0D, 0x8B, 0x77, 0x18, 0xEB, 0x08, 0x90, 0x38, 0x4F, 0x1D, 0x74,
        0x02, 0x33, 0xF6, 0xD1, 0xE7, 0x83, 0xC3, 0x29, 0x81, 0xFB, 0x52, 0x01, 0x72, 0x03, 0x8B, 0xC6, 0xC3, 0xE9, 0x21,
        0xFF, 0x8E, 0xC2, 0x33, 0xC9, 0xBD, 0x01, 0x00, 0xBB, 0x52, 0x01, 0x8B, 0xFE, 0x8B, 0xD1, 0xD1, 0xE2, 0xD1, 0xE2,
        0x03, 0xFA, 0x26, 0x8B, 0x45, 0x08, 0x26, 0x8B, 0x55, 0x0A, 0x0B, 0xD0, 0x75, 0x15, 0xD1, 0xE5, 0x83, 0xC7, 0x04,
        0x41, 0x83, 0xF9, 0x0B, 0x75, 0xE9, 0x33, 0xC0, 0x89, 0x47, 0x06, 0x89, 0x47, 0x08, 0xEB, 0x11, 0x2E, 0x85, 0x2E,
        0x02, 0x04, 0x74, 0xE4, 0x8B, 0xFE, 0x03, 0xF8, 0x89, 0x7F, 0x06, 0x8C, 0x47, 0x08, 0x83, 0x4F, 0x04, 0x40, 0xC7,
        0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x41, 0x83, 0xC3, 0x29, 0x83, 0xF9, 0x01, 0x72, 0xAF, 0x26, 0x8B, 0x44,
        0x04, 0x26, 0x8B, 0x54, 0x06, 0x0B, 0xD0, 0x74, 0x26, 0x8B, 0xFE, 0x03, 0xF8, 0x26, 0x80, 0x7D, 0x04, 0x42, 0x74,
        0x09, 0x26, 0x8B, 0x05, 0x26, 0x8B, 0x55, 0x02, 0xEB, 0xE8, 0x83, 0xC7, 0x04, 0x2E, 0x89, 0x3E, 0x0C, 0x04, 0x2E,
        0x8C, 0x06, 0x0E, 0x04, 0x2E, 0x8C, 0x06, 0x1A, 0x04, 0xC3, 0x8E, 0xC2, 0x8B, 0xFE, 0x8B, 0xF7, 0x2E, 0x89, 0x3E,
        0x14, 0x04, 0x2E, 0x8C, 0x06, 0x16, 0x04, 0x26, 0x8B, 0x44, 0x04, 0x26, 0x8B, 0x54, 0x06, 0x0B, 0xD0, 0x74, 0x17,
        0x8B, 0xFE, 0x03, 0xF8, 0x26, 0x80, 0x7D, 0x04, 0x42, 0x74, 0x09, 0x26, 0x8B, 0x05, 0x26, 0x8B, 0x55, 0x02, 0xEB,
        0xE8, 0x83, 0xC7, 0x04, 0x2E, 0x89, 0x3E, 0x10, 0x04, 0x2E, 0x8C, 0x06, 0x12, 0x04, 0xBB, 0x29, 0x01, 0x83, 0x4F,
        0x04, 0x40, 0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x83, 0xC3, 0x29, 0x81, 0xFB, 0x52, 0x01, 0x72, 0xEB,
        0xC3, 0xB8, 0x4D, 0x42, 0xBA, 0x01, 0x00, 0xC3, 0x33, 0xC0, 0x8E, 0xC0, 0xBE, 0xC0, 0x03, 0x2E, 0xA1, 0x08, 0x04,
        0x26, 0x89, 0x04, 0x2E, 0xA1, 0x0A, 0x04, 0x26, 0x89, 0x44, 0x02, 0x2E, 0x8E, 0x06, 0x2C, 0x00, 0xB4, 0x49, 0xCD,
        0x21, 0x8C, 0xC8, 0x8E, 0xC0, 0xB4, 0x49, 0xCD, 0x21, 0xC3, 0xBB, 0x52, 0x01, 0x33, 0xC9, 0x83, 0x4F, 0x04, 0x40,
        0xC7, 0x47, 0x25, 0x19, 0x01, 0x8C, 0x4F, 0x27, 0x8B, 0x77, 0x02, 0x83, 0x4C, 0x04, 0x40, 0xC7, 0x44, 0x25, 0x19,
        0x01, 0x8C, 0x4C, 0x27, 0x83, 0xC3, 0x29, 0x41, 0x83, 0xF9, 0x01, 0x75, 0xDC, 0xE8, 0x11, 0xFA, 0xC3, 0xBB, 0x52,
        0x01, 0x88, 0x57, 0x17, 0x32, 0xED, 0x89, 0x4F, 0x15, 0x8A, 0x2F, 0x33, 0xED, 0x8B, 0x57, 0x04, 0x33, 0xD2, 0xE8,
        0x9B, 0xF9, 0x89, 0x47, 0x23, 0x8B, 0x47, 0x04, 0x25, 0xFF, 0xBF, 0x0B, 0xC1, 0x89, 0x47, 0x04, 0xA9, 0x00, 0x40,
        0x74, 0x0D, 0x8B, 0x77, 0x21, 0x83, 0x0C, 0x02, 0x8B, 0x77, 0x1F, 0x83, 0x4C, 0x02, 0x02, 0xC3, 0xC3, 0xBB, 0x52,
        0x01, 0x0A, 0xC0, 0x75, 0x1E, 0x8B, 0xC2, 0x0B, 0xC6, 0x75, 0x05, 0x8C, 0xCA, 0xBE, 0x19, 0x01, 0x89, 0x57, 0x27,
        0x89, 0x77, 0x25, 0x88, 0x6F, 0x12, 0x8B, 0x77, 0x1F, 0x83, 0x4C, 0x02, 0x01, 0xC4, 0x77, 0x25, 0xC3, 0xA2, 0x06,
        0x3E, 0x0A, 0x7B, 0x04, 0x2B, 0x09, 0xB9, 0x09, 0x3E, 0x07, 0x3A, 0x08, 0x16, 0x0A, 0x0F, 0x0A, 0x36, 0x07, 0x35,
        0x07, 0x6B, 0x0A, 0xA4, 0x0A, 0xA3, 0x0A, 0xEB, 0x0E, 0x49, 0x46, 0x47, 0x4D, 0x20, 0x42, 0x55, 0x5A, 0x45, 0x52,
        0x20, 0x50, 0x43, 0x00, 0x1E, 0x06, 0x56, 0x57, 0x53, 0x51, 0x55, 0xFC, 0x8C, 0xCB, 0x8E, 0xDB, 0x33, 0xDB, 0x8A,
        0xDC, 0x2E, 0xFF, 0x97, 0xCA, 0x0A, 0x5D, 0x59, 0x5B, 0x5F, 0x5E, 0x07, 0x1F, 0xCF, 0xBC, 0x00, 0x01, 0xBA, 0x87,
        0x0B, 0xD1, 0xEA, 0xD1, 0xEA, 0xD1, 0xEA, 0xD1, 0xEA, 0x42, 0xB4, 0x4A, 0xCD, 0x21, 0x33, 0xC0, 0x8E, 0xC0, 0xBE,
        0xC0, 0x03, 0x26, 0x8B, 0x3C, 0x2E, 0x89, 0x3E, 0x08, 0x04, 0x26, 0x8E, 0x5C, 0x02, 0x2E, 0x8C, 0x1E, 0x0A, 0x04,
        0x8B, 0xC7, 0x8C, 0xDA, 0x0B, 0xD0, 0x74, 0x19, 0x8B, 0x4D, 0x02, 0x8B, 0x55, 0x04, 0x81, 0xF9, 0x49, 0x46, 0x75,
        0x0D, 0x81, 0xFA, 0x47, 0x4D, 0x75, 0x07, 0xB0, 0xFF, 0xB4, 0x4C, 0xCD, 0x21, 0xC3, 0x2E, 0xC7, 0x06, 0x04, 0x04,
        0x52, 0x01, 0x2E, 0x8C, 0x0E, 0x06, 0x04, 0xB8, 0xE6, 0x0A, 0x26, 0x89, 0x04, 0x26, 0x8C, 0x4C, 0x02, 0x32, 0xC0,
        0xBA, 0x13, 0x0B, 0xD1, 0xEA, 0xD1, 0xEA, 0xD1, 0xEA, 0xD1, 0xEA, 0x42, 0xB4, 0x31, 0xCD, 0x21 };

    const std::vector<uint8_t> uncompressed_reference(uncompressed_example,
        uncompressed_example + sizeof(uncompressed_example));

    const std::vector<uint8_t> compressed(compressed_example, compressed_example + sizeof(compressed_example));

    std::vector<uint8_t> uncompressed = uncompress(compressed, uncompressed_reference.size());

    return uncompressed == uncompressed_reference;
}

void generate_table2_test()
{
    const std::vector<uint8_t> table2_ref = {
        0x10, 0x15, 0x17, 0x23, 0x2A, 0x2E, 0x35, 0x36, 0x39, 0x4A, 0x33, 0x4C, 0x51, 0x53, 0x57, 0x53,
        0x5B, 0x5F, 0x60, 0x61, 0x60, 0x62, 0x52, 0x62, 0x63, 0x65, 0x5C, 0x66, 0x67, 0x68, 0x69, 0x6B,
        0x6D, 0x6F, 0x73, 0x7A, 0x85, 0x7A, 0x85, 0x37, 0x7A, 0x85, 0x93, 0x94, 0x96, 0x9E, 0x9F, 0xA5,
        0x58, 0x5D, 0xA7, 0xA9, 0xAB, 0xAE, 0xAB, 0xAE, 0xAB, 0x17, 0xAF, 0x55, 0xAF, 0x55, 0xAF, 0xB9,
        0xBC, 0xBD, 0xBE, 0xC9, 0xCB, 0xCC, 0xCB, 0xCC, 0xCB, 0xCE, 0xD0, 0xCE, 0xD0, 0xD2, 0xD6, 0xD7,
        0xD8, 0xDE, 0xDF, 0xE1, 0xDF, 0xE4, 0xEA, 0xE4, 0xEA, 0xED, 0xEF, 0x36, 0xF1, 0xF2, 0xF3
    };

    const table_3_4_t table_3_4 = generate_table_3_4_from_table2(table2_ref);

    const std::vector<uint8_t> table2 = generate_table2_from_table_3_4(table_3_4);
    assert(table2 == table2_ref);
}

struct test
{
    test()
    {
        generate_table2_test();
        assert(part_uncompress_unit_test());
        assert(uncompress_unit_test());
    }
};

static test t;

//========================================================

